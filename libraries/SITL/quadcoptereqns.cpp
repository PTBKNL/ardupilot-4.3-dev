#include "quadcoptereqns.h"
#include "specifieds.h"

Eigen::Matrix<double,37,37> get_mm(Eigen::Matrix<double,37,1> states, Eigen::Matrix<double,4,1> inputs) {
    double subx_0 = states(7,0);
    double subx_1 = sin(subx_0);
    double subx_2 = pow(subx_1, 2);
    double subx_3 = states(8,0);
    double subx_4 = sin(subx_3);
    double subx_5 = pow(subx_4, 2);
    double subx_6 = states(9,0);
    double subx_7 = sin(subx_6);
    double subx_8 = pow(subx_7, 2);
    double subx_9 = states(10,0);
    double subx_10 = sin(subx_9);
    double subx_11 = pow(subx_10, 2);
    double subx_12 = cos(subx_0);
    double subx_13 = pow(subx_12, 2);
    double subx_14 = cos(subx_3);
    double subx_15 = pow(subx_14, 2);
    double subx_16 = cos(subx_6);
    double subx_17 = pow(subx_16, 2);
    double subx_18 = cos(subx_9);
    double subx_19 = pow(subx_18, 2);
    double subx_20 = states(11,0);
    double subx_21 = cos(subx_20);
    double subx_22 = subx_12*subx_21;
    double subx_23 = states(14,0);
    double subx_24 = cos(subx_23);
    double subx_25 = subx_14*subx_24;
    double subx_26 = states(15,0);
    double subx_27 = cos(subx_26);
    double subx_28 = 0.00122951727112717*subx_16;
    double subx_29 = states(18,0);
    double subx_30 = cos(subx_29);
    double subx_31 = 0.00122951727112717*subx_18;
    double subx_32 = pow(subx_21, 2);
    double subx_33 = 7.0e-7*subx_32;
    double subx_34 = states(12,0);
    double subx_35 = cos(subx_34);
    double subx_36 = pow(subx_35, 2);
    double subx_37 = 7.0e-7*subx_36;
    double subx_38 = states(13,0);
    double subx_39 = cos(subx_38);
    double subx_40 = pow(subx_39, 2);
    double subx_41 = 7.0e-7*subx_5;
    double subx_42 = pow(subx_24, 2);
    double subx_43 = pow(subx_27, 2);
    double subx_44 = 7.0e-7*subx_8;
    double subx_45 = states(16,0);
    double subx_46 = cos(subx_45);
    double subx_47 = pow(subx_46, 2);
    double subx_48 = states(17,0);
    double subx_49 = cos(subx_48);
    double subx_50 = pow(subx_49, 2);
    double subx_51 = 7.0e-7*subx_11;
    double subx_52 = pow(subx_30, 2);
    double subx_53 = sin(subx_20);
    double subx_54 = pow(subx_53, 2);
    double subx_55 = 0.000368725*subx_54;
    double subx_56 = sin(subx_34);
    double subx_57 = pow(subx_56, 2);
    double subx_58 = 0.000368725*subx_57;
    double subx_59 = sin(subx_38);
    double subx_60 = pow(subx_59, 2);
    double subx_61 = 0.000368725*subx_5;
    double subx_62 = sin(subx_23);
    double subx_63 = pow(subx_62, 2);
    double subx_64 = sin(subx_26);
    double subx_65 = pow(subx_64, 2);
    double subx_66 = 0.000368725*subx_8;
    double subx_67 = sin(subx_45);
    double subx_68 = pow(subx_67, 2);
    double subx_69 = sin(subx_48);
    double subx_70 = pow(subx_69, 2);
    double subx_71 = 0.000368725*subx_70;
    double subx_72 = sin(subx_29);
    double subx_73 = pow(subx_72, 2);
    double subx_74 = 0.000368725*subx_73;
    double subx_75 = subx_12*subx_35;
    double subx_76 = subx_14*subx_39;
    double subx_77 = 0.000614758635563584*subx_35;
    double subx_78 = subx_12*subx_77;
    double subx_79 = subx_1*subx_77;
    double subx_80 = 0.000614758635563584*subx_39;
    double subx_81 = subx_14*subx_80;
    double subx_82 = subx_4*subx_80;
    double subx_83 = 0.000614758635563584*subx_21;
    double subx_84 = subx_12*subx_83;
    double subx_85 = -subx_84;
    double subx_86 = subx_1*subx_83;
    double subx_87 = -subx_86;
    double subx_88 = 0.000614758635563584*subx_24;
    double subx_89 = subx_14*subx_88;
    double subx_90 = -subx_89;
    double subx_91 = subx_4*subx_88;
    double subx_92 = -subx_91;
    double subx_93 = subx_1*subx_12;
    double subx_94 = 7.0e-7*subx_14*subx_4;
    double subx_95 = 0.000368725*subx_1*subx_12;
    double subx_96 = 0.000368725*subx_14*subx_4;
    double subx_97 = 7.0e-7*subx_16*subx_7;
    double subx_98 = 7.0e-7*subx_10*subx_18;
    double subx_99 = 0.000368725*subx_16*subx_7;
    double subx_100 = 0.000368725*subx_10*subx_18;
    double subx_101 = 0.000614758635563584*subx_27;
    double subx_102 = subx_101*subx_16;
    double subx_103 = subx_101*subx_7;
    double subx_104 = 0.000614758635563584*subx_30;
    double subx_105 = subx_104*subx_18;
    double subx_106 = subx_10*subx_104;
    double subx_107 = 0.000614758635563584*subx_46;
    double subx_108 = -subx_107*subx_16;
    double subx_109 = -subx_107*subx_7;
    double subx_110 = 0.000614758635563584*subx_49;
    double subx_111 = -subx_110*subx_18;
    double subx_112 = -subx_10*subx_110;
    double subx_113 = subx_102 + subx_103 + subx_105 + subx_106 + subx_108 + subx_109 + subx_111 + subx_112;
    double subx_114 = 0.00073745*subx_10*subx_18 - subx_100*subx_70 - subx_100*subx_73 + subx_113 - 0.00073745*subx_14*subx_4 + 0.00073745*subx_16*subx_7 + subx_33*subx_93 + subx_37*subx_93 + subx_40*subx_94 + subx_42*subx_94 - subx_43*subx_97 - subx_47*subx_97 - subx_50*subx_98 - subx_52*subx_98 + subx_54*subx_95 + subx_57*subx_95 + subx_60*subx_96 + subx_63*subx_96 - subx_65*subx_99 - subx_68*subx_99 + subx_78 + subx_79 + subx_81 + subx_82 + subx_85 + subx_87 + subx_90 + subx_92 - 0.00073745*subx_93 + 4.33680868994202e-19;
    double subx_115 = 0.254558441227157*subx_12;
    double subx_116 = subx_115*subx_53;
    double subx_117 = 0.254558441227157*subx_1;
    double subx_118 = subx_117*subx_53;
    double subx_119 = subx_116 - subx_118;
    double subx_120 = 0.002415*subx_12;
    double subx_121 = 0.254558441227157*subx_16;
    double subx_122 = subx_121*subx_67;
    double subx_123 = 0.254558441227157*subx_7;
    double subx_124 = subx_123*subx_67;
    double subx_125 = subx_122 - subx_124;
    double subx_126 = 0.002415*subx_16;
    double subx_127 = 0.254558441227157*subx_4;
    double subx_128 = subx_127*subx_59;
    double subx_129 = 0.254558441227157*subx_14;
    double subx_130 = subx_129*subx_59;
    double subx_131 = subx_128 - subx_130;
    double subx_132 = 0.002415*subx_14;
    double subx_133 = 0.254558441227157*subx_10;
    double subx_134 = subx_133*subx_72;
    double subx_135 = 0.254558441227157*subx_18;
    double subx_136 = subx_135*subx_72;
    double subx_137 = subx_134 - subx_136;
    double subx_138 = 0.002415*subx_18;
    double subx_139 = subx_129*subx_62;
    double subx_140 = subx_127*subx_62;
    double subx_141 = subx_139 - subx_140;
    double subx_142 = subx_135*subx_69;
    double subx_143 = subx_133*subx_69;
    double subx_144 = subx_142 - subx_143;
    double subx_145 = subx_117*subx_56;
    double subx_146 = subx_115*subx_56;
    double subx_147 = subx_145 - subx_146;
    double subx_148 = subx_123*subx_64;
    double subx_149 = subx_121*subx_64;
    double subx_150 = subx_148 - subx_149;
    double subx_151 = subx_115 + subx_117;
    double subx_152 = 0.002415*subx_1*subx_56;
    double subx_153 = subx_121 + subx_123;
    double subx_154 = 0.002415*subx_64*subx_7;
    double subx_155 = -subx_127 - subx_129;
    double subx_156 = 0.002415*subx_4*subx_62;
    double subx_157 = -subx_133 - subx_135;
    double subx_158 = 0.002415*subx_10*subx_69;
    double subx_159 = subx_127 + subx_129;
    double subx_160 = 0.002415*subx_4*subx_59;
    double subx_161 = subx_133 + subx_135;
    double subx_162 = 0.002415*subx_10*subx_72;
    double subx_163 = -subx_115 - subx_117;
    double subx_164 = 0.002415*subx_1*subx_53;
    double subx_165 = -subx_121 - subx_123;
    double subx_166 = 0.002415*subx_67*subx_7;
    double subx_167 = subx_1*subx_21;
    double subx_168 = 0.000368025*subx_53;
    double subx_169 = subx_167*subx_168;
    double subx_170 = subx_39*subx_4;
    double subx_171 = 0.000368025*subx_170*subx_59;
    double subx_172 = subx_64*subx_7;
    double subx_173 = 0.000368025*subx_27;
    double subx_174 = subx_172*subx_173;
    double subx_175 = subx_10*subx_69;
    double subx_176 = 0.000368025*subx_49;
    double subx_177 = subx_175*subx_176;
    double subx_178 = subx_1*subx_56;
    double subx_179 = 0.000368025*subx_178*subx_35;
    double subx_180 = -subx_179;
    double subx_181 = subx_24*subx_4;
    double subx_182 = 0.000368025*subx_181*subx_62;
    double subx_183 = -subx_182;
    double subx_184 = subx_67*subx_7;
    double subx_185 = 0.000368025*subx_46;
    double subx_186 = -subx_184*subx_185;
    double subx_187 = subx_10*subx_30;
    double subx_188 = -0.000368025*subx_187*subx_72;
    double subx_189 = states(3,0);
    double subx_190 = states(0,0);
    double subx_191 = 2*subx_190;
    double subx_192 = subx_189*subx_191;
    double subx_193 = states(2,0);
    double subx_194 = states(1,0);
    double subx_195 = 2*subx_194;
    double subx_196 = subx_193*subx_195;
    double subx_197 = -subx_192 + subx_196;
    double subx_198 = pow(subx_190, 2);
    double subx_199 = pow(subx_194, 2);
    double subx_200 = pow(subx_193, 2);
    double subx_201 = -subx_200;
    double subx_202 = pow(subx_189, 2);
    double subx_203 = -subx_202;
    double subx_204 = subx_198 + subx_199 + subx_201 + subx_203;
    double subx_205 = subx_16*subx_197 - subx_204*subx_7;
    double subx_206 = subx_205*subx_67;
    double subx_207 = subx_191*subx_193;
    double subx_208 = subx_189*subx_195;
    double subx_209 = subx_207 + subx_208;
    double subx_210 = subx_209*subx_46;
    double subx_211 = subx_206 + subx_210;
    double subx_212 = -subx_10*subx_204 + subx_18*subx_197;
    double subx_213 = subx_212*subx_72;
    double subx_214 = subx_209*subx_30;
    double subx_215 = subx_213 + subx_214;
    double subx_216 = subx_209*subx_21;
    double subx_217 = subx_12*subx_53;
    double subx_218 = subx_1*subx_53;
    double subx_219 = subx_197*subx_217 + subx_204*subx_218 + subx_216;
    double subx_220 = subx_209*subx_39;
    double subx_221 = subx_14*subx_59;
    double subx_222 = subx_197*subx_221;
    double subx_223 = subx_4*subx_59;
    double subx_224 = subx_204*subx_223 + subx_220 + subx_222;
    double subx_225 = subx_209*subx_27;
    double subx_226 = subx_205*subx_64;
    double subx_227 = subx_225 - subx_226;
    double subx_228 = subx_209*subx_49;
    double subx_229 = subx_212*subx_69;
    double subx_230 = subx_228 - subx_229;
    double subx_231 = subx_209*subx_35;
    double subx_232 = subx_12*subx_56;
    double subx_233 = -subx_178*subx_204 - subx_197*subx_232 + subx_231;
    double subx_234 = subx_209*subx_24;
    double subx_235 = subx_14*subx_62;
    double subx_236 = subx_4*subx_62;
    double subx_237 = -subx_197*subx_235 - subx_204*subx_236 + subx_234;
    double subx_238 = subx_1*subx_197;
    double subx_239 = subx_12*subx_204;
    double subx_240 = subx_238 - subx_239;
    double subx_241 = subx_197*subx_4;
    double subx_242 = subx_14*subx_204;
    double subx_243 = subx_241 - subx_242;
    double subx_244 = subx_197*subx_7;
    double subx_245 = subx_16*subx_204;
    double subx_246 = subx_244 + subx_245;
    double subx_247 = subx_10*subx_197;
    double subx_248 = subx_18*subx_204;
    double subx_249 = subx_247 + subx_248;
    double subx_250 = -subx_238 + subx_239;
    double subx_251 = -subx_241 + subx_242;
    double subx_252 = -subx_244 - subx_245;
    double subx_253 = -subx_247 - subx_248;
    double subx_254 = subx_120*subx_219 - subx_120*subx_233 + subx_126*subx_211 - subx_126*subx_227 + subx_132*subx_224 - subx_132*subx_237 + subx_138*subx_215 - subx_138*subx_230 + subx_152*subx_240 + subx_154*subx_246 + subx_156*subx_243 + subx_158*subx_249 - subx_160*subx_251 - subx_162*subx_253 - subx_164*subx_250 - subx_166*subx_252;
    double subx_255 = subx_198 - subx_199;
    double subx_256 = subx_200 + subx_203 + subx_255;
    double subx_257 = subx_192 + subx_196;
    double subx_258 = subx_16*subx_256 - subx_257*subx_7;
    double subx_259 = subx_258*subx_67;
    double subx_260 = subx_191*subx_194;
    double subx_261 = 2*subx_189*subx_193;
    double subx_262 = -subx_260 + subx_261;
    double subx_263 = subx_262*subx_46;
    double subx_264 = subx_259 + subx_263;
    double subx_265 = -subx_10*subx_257 + subx_18*subx_256;
    double subx_266 = subx_265*subx_72;
    double subx_267 = subx_262*subx_30;
    double subx_268 = subx_266 + subx_267;
    double subx_269 = subx_21*subx_262;
    double subx_270 = subx_217*subx_256 + subx_218*subx_257 + subx_269;
    double subx_271 = subx_262*subx_39;
    double subx_272 = subx_221*subx_256;
    double subx_273 = subx_223*subx_257 + subx_271 + subx_272;
    double subx_274 = subx_262*subx_27;
    double subx_275 = subx_258*subx_64;
    double subx_276 = subx_274 - subx_275;
    double subx_277 = subx_262*subx_49;
    double subx_278 = subx_265*subx_69;
    double subx_279 = subx_277 - subx_278;
    double subx_280 = subx_262*subx_35;
    double subx_281 = -subx_178*subx_257 - subx_232*subx_256 + subx_280;
    double subx_282 = subx_24*subx_262;
    double subx_283 = -subx_235*subx_256 - subx_236*subx_257 + subx_282;
    double subx_284 = subx_16*subx_257;
    double subx_285 = subx_256*subx_7;
    double subx_286 = subx_284 + subx_285;
    double subx_287 = subx_18*subx_257;
    double subx_288 = subx_10*subx_256;
    double subx_289 = subx_287 + subx_288;
    double subx_290 = subx_1*subx_256;
    double subx_291 = subx_12*subx_257;
    double subx_292 = subx_290 - subx_291;
    double subx_293 = subx_256*subx_4;
    double subx_294 = subx_14*subx_257;
    double subx_295 = subx_293 - subx_294;
    double subx_296 = -subx_290 + subx_291;
    double subx_297 = -subx_293 + subx_294;
    double subx_298 = -subx_284 - subx_285;
    double subx_299 = -subx_287 - subx_288;
    double subx_300 = subx_120*subx_270 - subx_120*subx_281 + subx_126*subx_264 - subx_126*subx_276 + subx_132*subx_273 - subx_132*subx_283 + subx_138*subx_268 - subx_138*subx_279 + subx_152*subx_292 + subx_154*subx_286 + subx_156*subx_295 + subx_158*subx_289 - subx_160*subx_297 - subx_162*subx_299 - subx_164*subx_296 - subx_166*subx_298;
    double subx_301 = subx_260 + subx_261;
    double subx_302 = -subx_207 + subx_208;
    double subx_303 = subx_16*subx_301 - subx_302*subx_7;
    double subx_304 = subx_303*subx_67;
    double subx_305 = subx_201 + subx_202 + subx_255;
    double subx_306 = subx_305*subx_46;
    double subx_307 = subx_304 + subx_306;
    double subx_308 = -subx_10*subx_302 + subx_18*subx_301;
    double subx_309 = subx_308*subx_72;
    double subx_310 = subx_30*subx_305;
    double subx_311 = subx_309 + subx_310;
    double subx_312 = subx_21*subx_305;
    double subx_313 = subx_1*subx_302;
    double subx_314 = subx_313*subx_53;
    double subx_315 = subx_217*subx_301;
    double subx_316 = subx_312 + subx_314 + subx_315;
    double subx_317 = subx_305*subx_39;
    double subx_318 = subx_223*subx_302;
    double subx_319 = subx_221*subx_301;
    double subx_320 = subx_317 + subx_318 + subx_319;
    double subx_321 = subx_27*subx_305;
    double subx_322 = subx_303*subx_64;
    double subx_323 = subx_321 - subx_322;
    double subx_324 = subx_305*subx_49;
    double subx_325 = subx_308*subx_69;
    double subx_326 = subx_324 - subx_325;
    double subx_327 = subx_305*subx_35;
    double subx_328 = subx_313*subx_56;
    double subx_329 = subx_232*subx_301;
    double subx_330 = subx_327 - subx_328 - subx_329;
    double subx_331 = subx_24*subx_305;
    double subx_332 = subx_236*subx_302;
    double subx_333 = subx_235*subx_301;
    double subx_334 = subx_331 - subx_332 - subx_333;
    double subx_335 = subx_16*subx_302;
    double subx_336 = subx_301*subx_7;
    double subx_337 = subx_335 + subx_336;
    double subx_338 = subx_18*subx_302;
    double subx_339 = subx_10*subx_301;
    double subx_340 = subx_338 + subx_339;
    double subx_341 = subx_1*subx_301;
    double subx_342 = subx_12*subx_302;
    double subx_343 = subx_341 - subx_342;
    double subx_344 = subx_301*subx_4;
    double subx_345 = subx_14*subx_302;
    double subx_346 = subx_344 - subx_345;
    double subx_347 = -subx_341 + subx_342;
    double subx_348 = -subx_344 + subx_345;
    double subx_349 = -subx_335 - subx_336;
    double subx_350 = 0.002415*subx_10;
    double subx_351 = -subx_338 - subx_339;
    double subx_352 = subx_351*subx_72;
    double subx_353 = subx_120*subx_316 - subx_120*subx_330 + subx_126*subx_307 - subx_126*subx_323 + subx_132*subx_320 - subx_132*subx_334 + subx_138*subx_311 - subx_138*subx_326 + subx_152*subx_343 + subx_154*subx_337 + subx_156*subx_346 + subx_158*subx_340 - subx_160*subx_348 - subx_164*subx_347 - subx_166*subx_349 - subx_350*subx_352;
    double subx_354 = -subx_169 + subx_179;
    double subx_355 = -subx_171 + subx_182;
    double subx_356 = subx_174 + subx_186;
    double subx_357 = subx_177 + subx_188;
    double subx_358 = 0.000368725*subx_12;
    double subx_359 = -subx_358 - subx_83;
    double subx_360 = subx_358 - subx_77;
    double subx_361 = 0.000368725*subx_14;
    double subx_362 = -subx_361 + subx_80;
    double subx_363 = subx_361 + subx_88;
    double subx_364 = 0.000368725*subx_16;
    double subx_365 = subx_101 + subx_364;
    double subx_366 = subx_107 - subx_364;
    double subx_367 = 0.000368725*subx_18;
    double subx_368 = -subx_110;
    double subx_369 = subx_367 + subx_368;
    double subx_370 = -subx_104;
    double subx_371 = -subx_367 + subx_370;
    double subx_372 = subx_27*subx_7;
    double subx_373 = 7.0e-7*subx_15;
    double subx_374 = 7.0e-7*subx_17;
    double subx_375 = 7.0e-7*subx_19;
    double subx_376 = 0.000368725*subx_15;
    double subx_377 = 0.000368725*subx_17;
    double subx_378 = subx_1*subx_35;
    double subx_379 = subx_46*subx_7;
    double subx_380 = subx_10*subx_49;
    double subx_381 = 0.002415*subx_4;
    double subx_382 = 0.002415*subx_7;
    double subx_383 = 0.002415*subx_1;
    double subx_384 = 0.002415*subx_12*subx_56;
    double subx_385 = 0.002415*subx_18*subx_72;
    double subx_386 = 0.002415*subx_14*subx_62;
    double subx_387 = 0.002415*subx_16*subx_67;
    double subx_388 = 0.002415*subx_14*subx_59;
    double subx_389 = 0.002415*subx_16*subx_64;
    double subx_390 = 0.002415*subx_12*subx_53;
    double subx_391 = 0.002415*subx_18*subx_69;
    double subx_392 = subx_168*subx_22;
    double subx_393 = 0.000368025*subx_221*subx_39;
    double subx_394 = subx_16*subx_67;
    double subx_395 = subx_185*subx_394;
    double subx_396 = subx_18*subx_72;
    double subx_397 = 0.000368025*subx_30*subx_396;
    double subx_398 = 0.000368025*subx_56*subx_75;
    double subx_399 = -subx_398;
    double subx_400 = 0.000368025*subx_235*subx_24;
    double subx_401 = -subx_400;
    double subx_402 = subx_16*subx_64;
    double subx_403 = -subx_173*subx_402;
    double subx_404 = subx_18*subx_69;
    double subx_405 = -subx_176*subx_404;
    double subx_406 = subx_211*subx_382 + subx_215*subx_350 - subx_219*subx_383 - subx_224*subx_381 - subx_227*subx_382 - subx_230*subx_350 + subx_233*subx_383 + subx_237*subx_381 + subx_240*subx_384 + subx_243*subx_386 - subx_246*subx_389 - subx_249*subx_391 - subx_250*subx_390 - subx_251*subx_388 + subx_252*subx_387 + subx_253*subx_385;
    double subx_407 = subx_264*subx_382 + subx_268*subx_350 - subx_270*subx_383 - subx_273*subx_381 - subx_276*subx_382 - subx_279*subx_350 + subx_281*subx_383 + subx_283*subx_381 - subx_286*subx_389 - subx_289*subx_391 + subx_292*subx_384 + subx_295*subx_386 - subx_296*subx_390 - subx_297*subx_388 + subx_298*subx_387 + subx_299*subx_385;
    double subx_408 = subx_138*subx_352 + subx_307*subx_382 + subx_311*subx_350 - subx_316*subx_383 - subx_320*subx_381 - subx_323*subx_382 - subx_326*subx_350 + subx_330*subx_383 + subx_334*subx_381 - subx_337*subx_389 - subx_340*subx_391 + subx_343*subx_384 + subx_346*subx_386 - subx_347*subx_390 - subx_348*subx_388 + subx_349*subx_387;
    double subx_409 = -subx_392 + subx_398;
    double subx_410 = -subx_393 + subx_400;
    double subx_411 = subx_395 + subx_403;
    double subx_412 = subx_397 + subx_405;
    double subx_413 = 0.000368725*subx_1;
    double subx_414 = subx_413 + subx_83;
    double subx_415 = -subx_413 + subx_77;
    double subx_416 = 0.000368725*subx_4;
    double subx_417 = subx_416 - subx_80;
    double subx_418 = -subx_416 - subx_88;
    double subx_419 = 0.000368725*subx_7;
    double subx_420 = subx_101 + subx_419;
    double subx_421 = subx_107 - subx_419;
    double subx_422 = 0.000368725*subx_10;
    double subx_423 = subx_368 + subx_422;
    double subx_424 = subx_370 - subx_422;
    double subx_425 = subx_17*subx_64;
    double subx_426 = 0.000614758635563584*subx_425;
    double subx_427 = subx_17*subx_67;
    double subx_428 = 0.000614758635563584*subx_427;
    double subx_429 = 0.000614758635563584*subx_8;
    double subx_430 = subx_429*subx_64;
    double subx_431 = subx_429*subx_67;
    double subx_432 = 0.000614758635563584*subx_69;
    double subx_433 = subx_19*subx_432;
    double subx_434 = 0.000614758635563584*subx_72;
    double subx_435 = subx_19*subx_434;
    double subx_436 = subx_11*subx_432;
    double subx_437 = subx_11*subx_434;
    double subx_438 = subx_13*subx_53;
    double subx_439 = subx_13*subx_56;
    double subx_440 = subx_2*subx_53;
    double subx_441 = subx_2*subx_56;
    double subx_442 = 0.000614758635563584*subx_59;
    double subx_443 = 0.000614758635563584*subx_62;
    double subx_444 = -subx_15*subx_442 - subx_15*subx_443 + 0.000614758635563584*subx_438 + 0.000614758635563584*subx_439 + 0.000614758635563584*subx_440 + 0.000614758635563584*subx_441 - subx_442*subx_5 - subx_443*subx_5;
    double subx_445 = 7.0e-7*subx_54;
    double subx_446 = 7.0e-7*subx_57;
    double subx_447 = 7.0e-7*subx_60;
    double subx_448 = 7.0e-7*subx_63;
    double subx_449 = 7.0e-7*subx_65;
    double subx_450 = 7.0e-7*subx_68;
    double subx_451 = 7.0e-7*subx_70;
    double subx_452 = 7.0e-7*subx_73;
    double subx_453 = 0.000368725*subx_32;
    double subx_454 = 0.000368725*subx_36;
    double subx_455 = 0.000368725*subx_40;
    double subx_456 = 0.000368725*subx_42;
    double subx_457 = 0.000368725*subx_43;
    double subx_458 = 0.000368725*subx_47;
    double subx_459 = 0.000368725*subx_50;
    double subx_460 = 0.000368725*subx_52;
    double subx_461 = 0.002415*subx_27;
    double subx_462 = subx_153*subx_461;
    double subx_463 = 0.002415*subx_30;
    double subx_464 = subx_161*subx_463;
    double subx_465 = 0.002415*subx_46;
    double subx_466 = subx_165*subx_465;
    double subx_467 = 0.002415*subx_49;
    double subx_468 = subx_157*subx_467;
    double subx_469 = 0.002415*subx_35;
    double subx_470 = subx_151*subx_469;
    double subx_471 = 0.002415*subx_39;
    double subx_472 = subx_159*subx_471;
    double subx_473 = 0.002415*subx_21;
    double subx_474 = subx_163*subx_473;
    double subx_475 = 0.002415*subx_24;
    double subx_476 = subx_155*subx_475;
    double subx_477 = subx_249*subx_467;
    double subx_478 = subx_253*subx_463;
    double subx_479 = subx_240*subx_469;
    double subx_480 = subx_243*subx_475;
    double subx_481 = subx_250*subx_473;
    double subx_482 = subx_251*subx_471;
    double subx_483 = subx_246*subx_461 + subx_252*subx_465;
    double subx_484 = subx_477 + subx_478 - subx_479 - subx_480 - subx_481 - subx_482 + subx_483;
    double subx_485 = subx_289*subx_467;
    double subx_486 = subx_299*subx_463;
    double subx_487 = subx_296*subx_473;
    double subx_488 = subx_297*subx_471;
    double subx_489 = subx_292*subx_469;
    double subx_490 = subx_295*subx_475;
    double subx_491 = subx_286*subx_461 + subx_298*subx_465;
    double subx_492 = subx_485 + subx_486 - subx_487 - subx_488 - subx_489 - subx_490 + subx_491;
    double subx_493 = subx_340*subx_467;
    double subx_494 = subx_351*subx_463;
    double subx_495 = subx_347*subx_473;
    double subx_496 = subx_348*subx_471;
    double subx_497 = subx_343*subx_469;
    double subx_498 = subx_346*subx_475;
    double subx_499 = subx_337*subx_461 + subx_349*subx_465;
    double subx_500 = subx_493 + subx_494 - subx_495 - subx_496 - subx_497 - subx_498 + subx_499;
    double subx_501 = -subx_445 - subx_446 - subx_453 - subx_454 - 6.3e-5;
    double subx_502 = -subx_447 - subx_448 - subx_455 - subx_456 - 6.3e-5;
    double subx_503 = subx_449 + subx_450 + subx_457 + subx_458 + 6.3e-5;
    double subx_504 = subx_451 + subx_452 + subx_459 + subx_460 + 6.3e-5;
    double subx_505 = -0.000614758635563584*subx_217 + 0.000614758635563584*subx_218;
    double subx_506 = -0.000614758635563584*subx_178 + 0.000614758635563584*subx_232;
    double subx_507 = 0.000614758635563584*subx_221 - subx_4*subx_442;
    double subx_508 = -subx_14*subx_443 + subx_4*subx_443;
    double subx_509 = 0.000614758635563584*subx_16;
    double subx_510 = -0.000614758635563584*subx_172 + subx_509*subx_64;
    double subx_511 = 0.000614758635563584*subx_184 - subx_509*subx_67;
    double subx_512 = subx_10*subx_432 - subx_18*subx_432;
    double subx_513 = subx_10*subx_72;
    double subx_514 = 0.000614758635563584*subx_396 - 0.000614758635563584*subx_513;
    double subx_515 = subx_479 + subx_481;
    double subx_516 = subx_480 + subx_482;
    double subx_517 = subx_477 + subx_478;
    double subx_518 = -subx_164*subx_204 - subx_197*subx_390 - 0.002415*subx_216;
    double subx_519 = subx_152*subx_204 + subx_197*subx_384 - 0.002415*subx_231;
    double subx_520 = -subx_160*subx_204 - 0.002415*subx_220 - 0.002415*subx_222;
    double subx_521 = subx_156*subx_204 + subx_197*subx_386 - 0.002415*subx_234;
    double subx_522 = -0.002415*subx_225 + 0.002415*subx_226;
    double subx_523 = -0.002415*subx_206 - 0.002415*subx_210;
    double subx_524 = -0.002415*subx_228 + 0.002415*subx_229;
    double subx_525 = -0.002415*subx_213 - 0.002415*subx_214;
    double subx_526 = subx_487 + subx_489;
    double subx_527 = subx_488 + subx_490;
    double subx_528 = subx_485 + subx_486;
    double subx_529 = -subx_164*subx_257 - subx_256*subx_390 - 0.002415*subx_269;
    double subx_530 = subx_152*subx_257 + subx_256*subx_384 - 0.002415*subx_280;
    double subx_531 = -subx_160*subx_257 - 0.002415*subx_271 - 0.002415*subx_272;
    double subx_532 = subx_156*subx_257 + subx_256*subx_386 - 0.002415*subx_282;
    double subx_533 = -0.002415*subx_274 + 0.002415*subx_275;
    double subx_534 = -0.002415*subx_259 - 0.002415*subx_263;
    double subx_535 = -0.002415*subx_277 + 0.002415*subx_278;
    double subx_536 = -0.002415*subx_266 - 0.002415*subx_267;
    double subx_537 = subx_495 + subx_497;
    double subx_538 = subx_496 + subx_498;
    double subx_539 = subx_493 + subx_494;
    double subx_540 = -subx_164*subx_302 - subx_301*subx_390 - 0.002415*subx_312;
    double subx_541 = subx_152*subx_302 + subx_301*subx_384 - 0.002415*subx_327;
    double subx_542 = -subx_160*subx_302 - 0.002415*subx_317 - 0.002415*subx_319;
    double subx_543 = subx_156*subx_302 + subx_301*subx_386 - 0.002415*subx_331;
    double subx_544 = -0.002415*subx_321 + 0.002415*subx_322;
    double subx_545 = -0.002415*subx_304 - 0.002415*subx_306;
    double subx_546 = -0.002415*subx_324 + 0.002415*subx_325;
    double subx_547 = -0.002415*subx_309 - 0.002415*subx_310;
    double subx_548 = states(19,0);
    double subx_549 = 0.5*subx_548;
    double subx_550 = states(20,0);
    double subx_551 = 0.5*subx_550;
    double subx_552 = states(21,0);
    double subx_553 = 0.5*subx_552;
    double subx_554 = states(22,0);
    double subx_555 = states(23,0);
    double subx_556 = states(24,0);
    double subx_557 = states(25,0);
    double subx_558 = states(26,0);
    double subx_559 = states(27,0);
    double subx_560 = states(28,0);
    double subx_561 = states(29,0);
    double subx_562 = states(30,0);
    double subx_563 = states(31,0);
    double subx_564 = states(32,0);
    double subx_565 = states(33,0);
    double subx_566 = states(34,0);
    double subx_567 = states(35,0);
    double subx_568 = states(36,0);
    double subx_569 = subx_16*subx_548;
    double subx_570 = subx_550*subx_7;
    double subx_571 = 3.1e-5*subx_569 + 3.1e-5*subx_570;
    double subx_572 = subx_552 + subx_559;
    double subx_573 = 6.3e-5*subx_552;
    double subx_574 = 6.3e-5*subx_559 + subx_573;
    double subx_575 = subx_569 + subx_570;
    double subx_576 = subx_548*subx_552;
    double subx_577 = -subx_548*subx_572 + subx_576;
    double subx_578 = subx_550*subx_552;
    double subx_579 = -subx_578;
    double subx_580 = subx_550*subx_572 + subx_579;
    double subx_581 = 3.1e-5*subx_16*subx_577 + subx_571*subx_572 - subx_574*subx_575 - 3.1e-5*subx_580*subx_7;
    double subx_582 = subx_18*subx_548;
    double subx_583 = subx_10*subx_550;
    double subx_584 = 3.1e-5*subx_582 + 3.1e-5*subx_583;
    double subx_585 = subx_552 + subx_560;
    double subx_586 = 6.3e-5*subx_560 + subx_573;
    double subx_587 = subx_582 + subx_583;
    double subx_588 = -subx_548*subx_585 + subx_576;
    double subx_589 = 3.1e-5*subx_18;
    double subx_590 = subx_550*subx_585 + subx_579;
    double subx_591 = -3.1e-5*subx_10*subx_590 + subx_584*subx_585 - subx_586*subx_587 + subx_588*subx_589;
    double subx_592 = subx_572*subx_67;
    double subx_593 = subx_548*subx_7;
    double subx_594 = subx_46*subx_593;
    double subx_595 = subx_16*subx_550;
    double subx_596 = subx_46*subx_595;
    double subx_597 = subx_592 + subx_594 - subx_596;
    double subx_598 = subx_46*subx_572;
    double subx_599 = subx_595*subx_67;
    double subx_600 = subx_593*subx_67;
    double subx_601 = 9.1e-5*subx_598 + 9.1e-5*subx_599 - 9.1e-5*subx_600;
    double subx_602 = subx_597*subx_601;
    double subx_603 = subx_598 + subx_599 - subx_600;
    double subx_604 = 7.0e-7*subx_592 + 7.0e-7*subx_594 - 7.0e-7*subx_596;
    double subx_605 = subx_603*subx_604;
    double subx_606 = subx_16*subx_580;
    double subx_607 = 9.1e-5*subx_606;
    double subx_608 = subx_577*subx_7;
    double subx_609 = 9.1e-5*subx_608;
    double subx_610 = -subx_607 - subx_609;
    double subx_611 = subx_602 - subx_605 + subx_610;
    double subx_612 = subx_585*subx_72;
    double subx_613 = subx_10*subx_548;
    double subx_614 = subx_30*subx_613;
    double subx_615 = subx_18*subx_550;
    double subx_616 = subx_30*subx_615;
    double subx_617 = subx_612 + subx_614 - subx_616;
    double subx_618 = subx_30*subx_585;
    double subx_619 = subx_615*subx_72;
    double subx_620 = subx_613*subx_72;
    double subx_621 = 9.1e-5*subx_618 + 9.1e-5*subx_619 - 9.1e-5*subx_620;
    double subx_622 = subx_617*subx_621;
    double subx_623 = subx_618 + subx_619 - subx_620;
    double subx_624 = 7.0e-7*subx_612 + 7.0e-7*subx_614 - 7.0e-7*subx_616;
    double subx_625 = subx_623*subx_624;
    double subx_626 = -9.1e-5*subx_550*subx_552;
    double subx_627 = 9.1e-5*subx_550*subx_585 + subx_626;
    double subx_628 = subx_18*subx_627;
    double subx_629 = subx_10*subx_588;
    double subx_630 = 9.1e-5*subx_629;
    double subx_631 = -subx_628 - subx_630;
    double subx_632 = subx_622 - subx_625 + subx_631;
    double subx_633 = subx_552 - subx_557;
    double subx_634 = subx_56*subx_633;
    double subx_635 = subx_12*subx_550;
    double subx_636 = subx_35*subx_635;
    double subx_637 = subx_1*subx_548;
    double subx_638 = subx_35*subx_637;
    double subx_639 = -subx_634 - subx_636 - subx_638;
    double subx_640 = subx_35*subx_633;
    double subx_641 = subx_56*subx_635;
    double subx_642 = subx_56*subx_637;
    double subx_643 = 9.1e-5*subx_640 - 9.1e-5*subx_641 - 9.1e-5*subx_642;
    double subx_644 = subx_640 - subx_641 - subx_642;
    double subx_645 = -7.0e-7*subx_634 - 7.0e-7*subx_636 - 7.0e-7*subx_638;
    double subx_646 = -subx_548*subx_633 + subx_576;
    double subx_647 = subx_1*subx_646;
    double subx_648 = 9.1e-5*subx_647;
    double subx_649 = 9.1e-5*subx_550*subx_633 + subx_626;
    double subx_650 = subx_12*subx_649;
    double subx_651 = subx_639*subx_643 - subx_644*subx_645 + subx_648 - subx_650;
    double subx_652 = subx_552 - subx_558;
    double subx_653 = subx_62*subx_652;
    double subx_654 = subx_14*subx_550;
    double subx_655 = subx_24*subx_654;
    double subx_656 = subx_4*subx_548;
    double subx_657 = subx_24*subx_656;
    double subx_658 = -subx_653 - subx_655 - subx_657;
    double subx_659 = subx_24*subx_652;
    double subx_660 = subx_62*subx_654;
    double subx_661 = subx_62*subx_656;
    double subx_662 = 9.1e-5*subx_659 - 9.1e-5*subx_660 - 9.1e-5*subx_661;
    double subx_663 = subx_659 - subx_660 - subx_661;
    double subx_664 = -7.0e-7*subx_653 - 7.0e-7*subx_655 - 7.0e-7*subx_657;
    double subx_665 = -subx_548*subx_652 + subx_576;
    double subx_666 = subx_4*subx_665;
    double subx_667 = 9.1e-5*subx_666;
    double subx_668 = subx_550*subx_652 + subx_579;
    double subx_669 = subx_14*subx_668;
    double subx_670 = 9.1e-5*subx_669;
    double subx_671 = subx_658*subx_662 - subx_663*subx_664 + subx_667 - subx_670;
    double subx_672 = pow(subx_552, 2);
    double subx_673 = 0.0053457272657703*subx_672;
    double subx_674 = 0.254558441227157*subx_550;
    double subx_675 = 0.254558441227157*subx_548;
    double subx_676 = -subx_675;
    double subx_677 = subx_674 + subx_676;
    double subx_678 = 0.021*subx_548;
    double subx_679 = subx_673 - subx_677*subx_678;
    double subx_680 = 0.115*subx_59;
    double subx_681 = subx_15*subx_680;
    double subx_682 = subx_5*subx_680;
    double subx_683 = 0.115*subx_62;
    double subx_684 = subx_15*subx_683;
    double subx_685 = subx_5*subx_683;
    double subx_686 = -subx_674;
    double subx_687 = subx_676 + subx_686;
    double subx_688 = subx_673 - subx_678*subx_687;
    double subx_689 = 0.115*subx_425;
    double subx_690 = 0.115*subx_8;
    double subx_691 = subx_64*subx_690;
    double subx_692 = 0.115*subx_427;
    double subx_693 = subx_67*subx_690;
    double subx_694 = -subx_673;
    double subx_695 = subx_674 + subx_675;
    double subx_696 = subx_548*subx_695;
    double subx_697 = subx_694 - 0.021*subx_696;
    double subx_698 = 0.115*subx_69;
    double subx_699 = subx_19*subx_698;
    double subx_700 = subx_11*subx_698;
    double subx_701 = 0.115*subx_72;
    double subx_702 = subx_19*subx_701;
    double subx_703 = subx_11*subx_701;
    double subx_704 = subx_675 + subx_686;
    double subx_705 = subx_548*subx_704;
    double subx_706 = subx_694 - 0.021*subx_705;
    double subx_707 = 0.115*subx_438;
    double subx_708 = 0.115*subx_440;
    double subx_709 = 0.115*subx_439;
    double subx_710 = 0.115*subx_441;
    double subx_711 = subx_12*subx_548;
    double subx_712 = subx_1*subx_550;
    double subx_713 = 3.1e-5*subx_711 - 3.1e-5*subx_712;
    double subx_714 = -6.3e-5*subx_557 + subx_573;
    double subx_715 = subx_711 - subx_712;
    double subx_716 = subx_550*subx_633 + subx_579;
    double subx_717 = 3.1e-5*subx_12;
    double subx_718 = 3.1e-5*subx_1*subx_716 + subx_633*subx_713 + subx_646*subx_717 - subx_714*subx_715;
    double subx_719 = subx_14*subx_548;
    double subx_720 = subx_4*subx_550;
    double subx_721 = 3.1e-5*subx_719 - 3.1e-5*subx_720;
    double subx_722 = -6.3e-5*subx_558 + subx_573;
    double subx_723 = subx_719 - subx_720;
    double subx_724 = 3.1e-5*subx_14*subx_665 + 3.1e-5*subx_4*subx_668 + subx_652*subx_721 - subx_722*subx_723;
    double subx_725 = -subx_593 + subx_595;
    double subx_726 = -3.1e-5*subx_593 + 3.1e-5*subx_595;
    double subx_727 = -subx_572*subx_726 + subx_574*subx_725 + 3.1e-5*subx_606 + 3.1e-5*subx_608;
    double subx_728 = -subx_613 + subx_615;
    double subx_729 = -3.1e-5*subx_613 + 3.1e-5*subx_615;
    double subx_730 = -subx_585*subx_729 + subx_586*subx_728 + subx_589*subx_590 + 3.1e-5*subx_629;
    double subx_731 = subx_635 + subx_637;
    double subx_732 = 3.1e-5*subx_635 + 3.1e-5*subx_637;
    double subx_733 = -subx_633*subx_732 - 3.1e-5*subx_647 + subx_714*subx_731 + subx_716*subx_717;
    double subx_734 = subx_654 + subx_656;
    double subx_735 = 3.1e-5*subx_654 + 3.1e-5*subx_656;
    double subx_736 = -subx_652*subx_735 - 3.1e-5*subx_666 + 3.1e-5*subx_669 + subx_722*subx_734;
    double subx_737 = subx_572*subx_64;
    double subx_738 = subx_27*subx_595;
    double subx_739 = subx_27*subx_593;
    double subx_740 = subx_737 + subx_738 - subx_739;
    double subx_741 = subx_27*subx_572;
    double subx_742 = subx_593*subx_64;
    double subx_743 = subx_595*subx_64;
    double subx_744 = 9.1e-5*subx_741 + 9.1e-5*subx_742 - 9.1e-5*subx_743;
    double subx_745 = subx_740*subx_744;
    double subx_746 = subx_741 + subx_742 - subx_743;
    double subx_747 = 7.0e-7*subx_737 + 7.0e-7*subx_738 - 7.0e-7*subx_739;
    double subx_748 = subx_746*subx_747;
    double subx_749 = subx_607 + subx_609;
    double subx_750 = subx_745 - subx_748 + subx_749;
    double subx_751 = subx_585*subx_69;
    double subx_752 = subx_49*subx_615;
    double subx_753 = subx_49*subx_613;
    double subx_754 = subx_751 + subx_752 - subx_753;
    double subx_755 = subx_49*subx_585;
    double subx_756 = subx_613*subx_69;
    double subx_757 = subx_615*subx_69;
    double subx_758 = 9.1e-5*subx_755 + 9.1e-5*subx_756 - 9.1e-5*subx_757;
    double subx_759 = subx_754*subx_758;
    double subx_760 = subx_755 + subx_756 - subx_757;
    double subx_761 = 7.0e-7*subx_751 + 7.0e-7*subx_752 - 7.0e-7*subx_753;
    double subx_762 = subx_760*subx_761;
    double subx_763 = subx_628 + subx_630;
    double subx_764 = subx_759 - subx_762 + subx_763;
    double subx_765 = subx_53*subx_633;
    double subx_766 = subx_21*subx_635;
    double subx_767 = subx_21*subx_637;
    double subx_768 = -subx_765 + subx_766 + subx_767;
    double subx_769 = subx_21*subx_633;
    double subx_770 = subx_53*subx_635;
    double subx_771 = subx_53*subx_637;
    double subx_772 = 9.1e-5*subx_769 + 9.1e-5*subx_770 + 9.1e-5*subx_771;
    double subx_773 = subx_769 + subx_770 + subx_771;
    double subx_774 = -7.0e-7*subx_765 + 7.0e-7*subx_766 + 7.0e-7*subx_767;
    double subx_775 = -subx_648 + subx_650 + subx_768*subx_772 - subx_773*subx_774;
    double subx_776 = subx_59*subx_652;
    double subx_777 = subx_39*subx_654;
    double subx_778 = subx_39*subx_656;
    double subx_779 = -subx_776 + subx_777 + subx_778;
    double subx_780 = subx_39*subx_652;
    double subx_781 = subx_59*subx_654;
    double subx_782 = subx_59*subx_656;
    double subx_783 = 9.1e-5*subx_780 + 9.1e-5*subx_781 + 9.1e-5*subx_782;
    double subx_784 = subx_780 + subx_781 + subx_782;
    double subx_785 = -7.0e-7*subx_776 + 7.0e-7*subx_777 + 7.0e-7*subx_778;
    double subx_786 = -subx_667 + subx_670 + subx_779*subx_783 - subx_784*subx_785;
    double subx_787 = -0.115*subx_769 - 0.115*subx_770 - 0.115*subx_771;
    double subx_788 = -subx_561 + subx_715;
    double subx_789 = -0.115*subx_561 + 0.115*subx_711 - 0.115*subx_712;
    double subx_790 = 0.021*subx_773*subx_787 - 0.021*subx_788*subx_789;
    double subx_791 = 0.254558441227157*subx_53*subx_790;
    double subx_792 = -0.115*subx_640 + 0.115*subx_641 + 0.115*subx_642;
    double subx_793 = -subx_562 - subx_711 + subx_712;
    double subx_794 = 0.002415*subx_1*subx_550 - 0.002415*subx_12*subx_548 - 0.002415*subx_562;
    double subx_795 = 0.021*subx_644*subx_792 - subx_793*subx_794;
    double subx_796 = 0.254558441227157*subx_56*subx_795;
    double subx_797 = -subx_654*subx_680 - 0.115*subx_780 - 0.115*subx_782;
    double subx_798 = subx_779*subx_797;
    double subx_799 = 0.002415*subx_558;
    double subx_800 = subx_654*subx_799;
    double subx_801 = subx_656*subx_799;
    double subx_802 = -0.021*subx_798 - subx_800 - subx_801;
    double subx_803 = 0.254558441227157*subx_39*subx_802;
    double subx_804 = subx_654*subx_683 + subx_656*subx_683 - 0.115*subx_659;
    double subx_805 = subx_658*subx_804;
    double subx_806 = subx_800 + subx_801 - 0.021*subx_805;
    double subx_807 = 0.254558441227157*subx_24*subx_806;
    double subx_808 = 0.1725*subx_712;
    double subx_809 = 0.1725*subx_711;
    double subx_810 = subx_117*subx_552;
    double subx_811 = subx_115*subx_552;
    double subx_812 = subx_233*subx_554 + subx_281*subx_555 + subx_330*subx_556 + subx_35*subx_704 + subx_56*subx_810 - subx_56*subx_811 - 0.1725*subx_562 + subx_808 - subx_809;
    double subx_813 = subx_240*subx_554 + subx_292*subx_555 + subx_343*subx_556 - 0.1725*subx_640 + 0.1725*subx_641 + 0.1725*subx_642 + subx_810 + subx_811;
    double subx_814 = get_blade_thrust(subx_812, subx_813);
    double subx_815 = 0.254558441227157*subx_814;
    double subx_816 = subx_39*subx_815;
    double subx_817 = subx_24*subx_815;
    double subx_818 = 0.20593755*subx_304 + 0.20593755*subx_306;
    double subx_819 = 0.115*subx_16;
    double subx_820 = 0.20593755*subx_309 + 0.20593755*subx_310;
    double subx_821 = 0.115*subx_18;
    double subx_822 = 0.20593755*subx_312 + 0.20593755*subx_314 + 0.20593755*subx_315;
    double subx_823 = 0.115*subx_12;
    double subx_824 = 0.02368281825*subx_317;
    double subx_825 = 0.02368281825*subx_318;
    double subx_826 = 0.02368281825*subx_319;
    double subx_827 = subx_824 + subx_825 + subx_826;
    double subx_828 = 0.115*subx_741 + 0.115*subx_742 - 0.115*subx_743;
    double subx_829 = subx_740*subx_828;
    double subx_830 = subx_548*subx_559*subx_7;
    double subx_831 = 0.002415*subx_830;
    double subx_832 = subx_16*subx_550*subx_559;
    double subx_833 = 0.002415*subx_832;
    double subx_834 = -0.021*subx_829 + subx_831 - subx_833;
    double subx_835 = subx_613*subx_698 - subx_615*subx_698 + 0.115*subx_755;
    double subx_836 = subx_754*subx_835;
    double subx_837 = 0.002415*subx_560;
    double subx_838 = subx_613*subx_837;
    double subx_839 = subx_615*subx_837;
    double subx_840 = -0.021*subx_836 + subx_838 - subx_839;
    double subx_841 = subx_639*subx_792;
    double subx_842 = subx_12*subx_550*subx_557;
    double subx_843 = 0.002415*subx_842;
    double subx_844 = subx_1*subx_548*subx_557;
    double subx_845 = 0.002415*subx_844;
    double subx_846 = -0.021*subx_841 + subx_843 + subx_845;
    double subx_847 = 0.115*subx_14;
    double subx_848 = -subx_563 + subx_723;
    double subx_849 = 0.002415*subx_14*subx_548 - 0.002415*subx_4*subx_550 - 0.002415*subx_563;
    double subx_850 = 0.021*subx_784*subx_797 - subx_848*subx_849;
    double subx_851 = 0.254558441227157*subx_59*subx_850;
    double subx_852 = -subx_564 - subx_719 + subx_720;
    double subx_853 = -0.002415*subx_14*subx_548 + 0.002415*subx_4*subx_550 - 0.002415*subx_564;
    double subx_854 = 0.021*subx_663*subx_804 - subx_852*subx_853;
    double subx_855 = 0.254558441227157*subx_62*subx_854;
    double subx_856 = 0.021*subx_1*subx_21*subx_548 + 0.021*subx_12*subx_21*subx_550 - 0.021*subx_53*subx_633;
    double subx_857 = -subx_787*subx_856 - subx_843 - subx_845;
    double subx_858 = 0.254558441227157*subx_21;
    double subx_859 = subx_857*subx_858;
    double subx_860 = 0.254558441227157*subx_35;
    double subx_861 = subx_846*subx_860;
    double subx_862 = subx_116*subx_552 - subx_118*subx_552 + subx_21*subx_704 + subx_219*subx_554 + subx_270*subx_555 + subx_316*subx_556 - 0.1725*subx_561 - subx_808 + subx_809;
    double subx_863 = subx_250*subx_554 + subx_296*subx_555 + subx_347*subx_556 - 0.1725*subx_769 - 0.1725*subx_770 - 0.1725*subx_771 - subx_810 - subx_811;
    double subx_864 = get_blade_thrust(subx_862, subx_863);
    double subx_865 = subx_858*subx_864;
    double subx_866 = subx_860*subx_864;
    double subx_867 = 0.20593755*subx_321 - 0.20593755*subx_322;
    double subx_868 = 0.20593755*subx_324 - 0.20593755*subx_325;
    double subx_869 = 0.20593755*subx_327 - 0.20593755*subx_328 - 0.20593755*subx_329;
    double subx_870 = 0.02368281825*subx_331;
    double subx_871 = -0.02368281825*subx_14*subx_301*subx_62 - 0.02368281825*subx_302*subx_4*subx_62 + subx_870;
    double subx_872 = 0.115*subx_598 + 0.115*subx_599 - 0.115*subx_600;
    double subx_873 = -0.021*subx_16*subx_46*subx_550 + 0.021*subx_46*subx_548*subx_7 + 0.021*subx_572*subx_67;
    double subx_874 = -subx_831 + subx_833 - subx_872*subx_873;
    double subx_875 = -subx_613*subx_701 + 0.115*subx_618 + 0.115*subx_619;
    double subx_876 = subx_617*subx_875;
    double subx_877 = -subx_838 + subx_839 - 0.021*subx_876;
    double subx_878 = 9.1e-5*subx_562;
    double subx_879 = 9.1e-5*subx_712;
    double subx_880 = 9.1e-5*subx_711;
    double subx_881 = -subx_878 + subx_879 - subx_880;
    double subx_882 = 9.1e-5*subx_548*subx_552;
    double subx_883 = -9.1e-5*subx_548*subx_633 + subx_882;
    double subx_884 = -subx_178*subx_649 - subx_232*subx_883 + subx_639*subx_878 - subx_639*subx_881 + subx_645*subx_793;
    double subx_885 = 9.1e-5*subx_564;
    double subx_886 = 9.1e-5*subx_720;
    double subx_887 = 9.1e-5*subx_719;
    double subx_888 = -subx_885 + subx_886 - subx_887;
    double subx_889 = 9.1e-5*subx_550*subx_652 + subx_626;
    double subx_890 = -9.1e-5*subx_548*subx_652 + subx_882;
    double subx_891 = -subx_235*subx_890 - subx_236*subx_889 + subx_658*subx_885 - subx_658*subx_888 + subx_664*subx_852;
    double subx_892 = subx_62*subx_891;
    double subx_893 = 9.1e-5*subx_565;
    double subx_894 = 9.1e-5*subx_569;
    double subx_895 = 9.1e-5*subx_570;
    double subx_896 = subx_893 + subx_894 + subx_895;
    double subx_897 = subx_565 + subx_575;
    double subx_898 = 7.0e-7*subx_16*subx_577;
    double subx_899 = -7.0e-7*subx_550*subx_552;
    double subx_900 = 7.0e-7*subx_550*subx_572 + subx_899;
    double subx_901 = subx_27*subx_898 - subx_372*subx_900 + 7.0e-7*subx_565*subx_746 - subx_744*subx_897 + subx_746*subx_896;
    double subx_902 = 9.1e-5*subx_567;
    double subx_903 = 9.1e-5*subx_582;
    double subx_904 = 9.1e-5*subx_583;
    double subx_905 = subx_902 + subx_903 + subx_904;
    double subx_906 = subx_567 + subx_587;
    double subx_907 = subx_18*subx_49;
    double subx_908 = 7.0e-7*subx_548*subx_552;
    double subx_909 = -7.0e-7*subx_548*subx_585 + subx_908;
    double subx_910 = 7.0e-7*subx_550*subx_585 + subx_899;
    double subx_911 = -subx_380*subx_910 + 7.0e-7*subx_567*subx_760 - subx_758*subx_906 + subx_760*subx_905 + subx_907*subx_909;
    double subx_912 = 7.0e-7*subx_550*subx_633 + subx_899;
    double subx_913 = -7.0e-7*subx_548*subx_633 + subx_908;
    double subx_914 = -subx_378*subx_912 - 7.0e-7*subx_562*subx_644 - subx_643*subx_793 + subx_644*subx_881 - subx_75*subx_913;
    double subx_915 = subx_35*subx_914;
    double subx_916 = 7.0e-7*subx_550*subx_652 + subx_899;
    double subx_917 = -7.0e-7*subx_548*subx_652 + subx_908;
    double subx_918 = -subx_181*subx_916 - subx_25*subx_917 - 7.0e-7*subx_564*subx_663 - subx_662*subx_852 + subx_663*subx_888;
    double subx_919 = subx_566 - subx_569 - subx_570;
    double subx_920 = 9.1e-5*subx_566;
    double subx_921 = -subx_894 - subx_895 + subx_920;
    double subx_922 = -9.1e-5*subx_548*subx_572 + subx_882;
    double subx_923 = 9.1e-5*subx_550*subx_572 + subx_626;
    double subx_924 = -subx_184*subx_923 + subx_394*subx_922 - subx_597*subx_920 - subx_597*subx_921 + subx_604*subx_919;
    double subx_925 = subx_568 - subx_582 - subx_583;
    double subx_926 = 9.1e-5*subx_568;
    double subx_927 = -subx_903 - subx_904 + subx_926;
    double subx_928 = -9.1e-5*subx_548*subx_585 + subx_882;
    double subx_929 = subx_396*subx_928 - subx_513*subx_627 - subx_617*subx_926 - subx_617*subx_927 + subx_624*subx_925;
    double subx_930 = get_blade_torque(subx_862, subx_863);
    double subx_931 = get_blade_torque(subx_812, subx_813);
    double subx_932 = 0.1725*subx_719;
    double subx_933 = 0.1725*subx_720;
    double subx_934 = subx_128*subx_552 - subx_130*subx_552 + subx_224*subx_554 + subx_273*subx_555 + subx_320*subx_556 + subx_39*subx_677 - 0.1725*subx_563 + subx_932 - subx_933;
    double subx_935 = subx_129*subx_552;
    double subx_936 = subx_127*subx_552;
    double subx_937 = subx_251*subx_554 + subx_297*subx_555 + subx_348*subx_556 - 0.1725*subx_780 - 0.1725*subx_781 - 0.1725*subx_782 + subx_935 + subx_936;
    double subx_938 = get_blade_torque(subx_934, subx_937);
    double subx_939 = subx_139*subx_552 - subx_140*subx_552 + subx_237*subx_554 + subx_24*subx_677 + subx_283*subx_555 + subx_334*subx_556 - 0.1725*subx_564 - subx_932 + subx_933;
    double subx_940 = subx_243*subx_554 + subx_295*subx_555 + subx_346*subx_556 - 0.1725*subx_659 + 0.1725*subx_660 + 0.1725*subx_661 - subx_935 - subx_936;
    double subx_941 = get_blade_torque(subx_939, subx_940);
    double subx_942 = 9.1e-5*subx_561;
    double subx_943 = -subx_879 + subx_880 - subx_942;
    double subx_944 = subx_217*subx_883 + subx_218*subx_649 + subx_768*subx_942 - subx_768*subx_943 + subx_774*subx_788;
    double subx_945 = subx_53*subx_944;
    double subx_946 = 9.1e-5*subx_563;
    double subx_947 = -subx_886 + subx_887 - subx_946;
    double subx_948 = subx_221*subx_890 + subx_223*subx_889 + subx_779*subx_946 - subx_779*subx_947 + subx_785*subx_848;
    double subx_949 = subx_379*subx_900 - subx_46*subx_898 + 7.0e-7*subx_566*subx_603 - subx_601*subx_919 + subx_603*subx_921;
    double subx_950 = subx_46*subx_949;
    double subx_951 = subx_18*subx_30;
    double subx_952 = subx_187*subx_910 + 7.0e-7*subx_568*subx_623 - subx_621*subx_925 + subx_623*subx_927 - subx_909*subx_951;
    double subx_953 = subx_167*subx_912 + subx_22*subx_913 - 7.0e-7*subx_561*subx_773 - subx_772*subx_788 + subx_773*subx_943;
    double subx_954 = subx_170*subx_916 - 7.0e-7*subx_563*subx_784 + subx_76*subx_917 - subx_783*subx_848 + subx_784*subx_947;
    double subx_955 = subx_172*subx_923 - subx_402*subx_922 - subx_740*subx_893 - subx_740*subx_896 + subx_747*subx_897;
    double subx_956 = subx_175*subx_627 - subx_404*subx_928 - subx_754*subx_902 - subx_754*subx_905 + subx_761*subx_906;
    double subx_957 = 0.0053457272657703*subx_576;
    double subx_958 = 0.0053457272657703*subx_578;
    double subx_959 = subx_957 + subx_958;
    double subx_960 = 0.115*subx_12*subx_35;
    double subx_961 = -subx_958;
    double subx_962 = subx_957 + subx_961;
    double subx_963 = 0.115*subx_16*subx_962;
    double subx_964 = -subx_957;
    double subx_965 = subx_958 + subx_964;
    double subx_966 = 0.115*subx_18*subx_49;
    double subx_967 = 0.20593755*subx_335;
    double subx_968 = 0.20593755*subx_336;
    double subx_969 = subx_967 + subx_968;
    double subx_970 = 0.115*subx_64*subx_7;
    double subx_971 = 0.20593755*subx_338;
    double subx_972 = 0.20593755*subx_339;
    double subx_973 = subx_971 + subx_972;
    double subx_974 = 0.115*subx_10*subx_69;
    double subx_975 = 0.20593755*subx_341;
    double subx_976 = 0.20593755*subx_342;
    double subx_977 = subx_975 - subx_976;
    double subx_978 = 0.115*subx_1*subx_56;
    double subx_979 = 0.20593755*subx_344;
    double subx_980 = 0.20593755*subx_345;
    double subx_981 = subx_979 - subx_980;
    double subx_982 = 0.115*subx_4*subx_62;
    double subx_983 = subx_961 + subx_964;
    double subx_984 = 0.115*subx_24;
    double subx_985 = subx_983*subx_984;
    double subx_986 = 0.002415*subx_53*subx_557;
    double subx_987 = 0.002415*subx_21*subx_561;
    double subx_988 = 0.002415*subx_561*subx_765 - subx_635*subx_987 - subx_637*subx_987 - subx_711*subx_986 + subx_712*subx_986 + subx_789*subx_856;
    double subx_989 = 0.115*subx_1*subx_53;
    double subx_990 = -0.000277725*subx_14*subx_39*subx_550*subx_563 - 0.000277725*subx_14*subx_548*subx_558*subx_59 - 0.000277725*subx_39*subx_4*subx_548*subx_563 + 0.000277725*subx_4*subx_550*subx_558*subx_59 + 0.000277725*subx_563*subx_59*subx_652 + 0.002415*subx_779*(-0.115*subx_563 + 0.115*subx_719 - 0.115*subx_720);
    double subx_991 = -0.115*subx_566 + 0.115*subx_569 + 0.115*subx_570;
    double subx_992 = 0.002415*subx_566;
    double subx_993 = 0.002415*subx_559*subx_67;
    double subx_994 = subx_16*subx_465*subx_550*subx_566 - subx_569*subx_993 - subx_570*subx_993 - subx_592*subx_992 - subx_594*subx_992 + subx_873*subx_991;
    double subx_995 = 0.115*subx_67*subx_7;
    double subx_996 = 0.002415*subx_10*subx_550 + 0.002415*subx_18*subx_548 - 0.002415*subx_568;
    double subx_997 = 0.002415*subx_568;
    double subx_998 = 0.002415*subx_18*subx_548*subx_560;
    double subx_999 = 0.002415*subx_10*subx_550*subx_560;
    double subx_1000 = subx_18*subx_463*subx_550*subx_568 - subx_612*subx_997 - subx_614*subx_997 + subx_617*subx_996 - subx_72*subx_998 - subx_72*subx_999;
    double subx_1001 = 0.115*subx_10*subx_72;
    double subx_1002 = 0.115*subx_21;
    double subx_1003 = subx_1002*subx_959;
    double subx_1004 = subx_30*subx_965;
    double subx_1005 = -subx_975 + subx_976;
    double subx_1006 = -subx_979 + subx_980;
    double subx_1007 = 0.115*subx_4*subx_59;
    double subx_1008 = 0.115*subx_14*subx_39;
    double subx_1009 = -subx_967 - subx_968;
    double subx_1010 = -subx_971 - subx_972;
    double subx_1011 = 0.002415*subx_562;
    double subx_1012 = 0.002415*subx_557*subx_56;
    double subx_1013 = subx_1*subx_469*subx_548*subx_562 + subx_1011*subx_634 + subx_1011*subx_636 + subx_1012*subx_711 - subx_1012*subx_712 + subx_639*subx_794;
    double subx_1014 = 0.002415*subx_24*subx_564;
    double subx_1015 = 0.002415*subx_14*subx_548*subx_558;
    double subx_1016 = 0.002415*subx_4*subx_550*subx_558;
    double subx_1017 = subx_1014*subx_654 + subx_1014*subx_656 + subx_1015*subx_62 - subx_1016*subx_62 + 0.002415*subx_564*subx_653 + subx_658*subx_853;
    double subx_1018 = -0.002415*subx_16*subx_548 - 0.002415*subx_550*subx_7 - 0.002415*subx_565;
    double subx_1019 = 0.002415*subx_565;
    double subx_1020 = 0.002415*subx_559*subx_64;
    double subx_1021 = subx_1018*subx_740 - subx_1019*subx_737 - subx_1019*subx_738 + subx_1019*subx_739 + subx_1020*subx_569 + subx_1020*subx_570;
    double subx_1022 = -0.002415*subx_10*subx_550 - 0.002415*subx_18*subx_548 - 0.002415*subx_567;
    double subx_1023 = 0.002415*subx_49*subx_567;
    double subx_1024 = subx_1022*subx_754 + subx_1023*subx_613 - subx_1023*subx_615 - 0.002415*subx_567*subx_751 + subx_69*subx_998 + subx_69*subx_999;
    double subx_1025 = -subx_1018*subx_897 + 0.021*subx_746*subx_828;
    double subx_1026 = 0.021*subx_603*subx_872 - 0.021*subx_919*subx_991;
    double subx_1027 = get_blade_thrust(subx_934, subx_937);
    double subx_1028 = 0.254558441227157*subx_1027;
    double subx_1029 = -subx_1022*subx_906 + 0.021*subx_760*subx_835;
    double subx_1030 = 0.021*subx_623*subx_875 - subx_925*subx_996;
    double subx_1031 = 0.254558441227157*subx_49;
    double subx_1032 = 0.254558441227157*subx_30;
    double subx_1033 = get_blade_thrust(subx_939, subx_940);
    double subx_1034 = 0.254558441227157*subx_1025*subx_64 + 0.254558441227157*subx_1026*subx_67 + subx_1028*subx_27 + subx_1028*subx_46 - 0.254558441227157*subx_1029*subx_69 - 0.254558441227157*subx_1030*subx_72 - subx_1031*subx_1033 - subx_1031*subx_840 - subx_1032*subx_1033 - subx_1032*subx_877 + 0.254558441227157*subx_27*subx_834 + 0.254558441227157*subx_46*subx_874;
    double subx_1035 = subx_550*subx_695;
    double subx_1036 = 0.021*subx_1035 + subx_673;
    double subx_1037 = subx_550*subx_677;
    double subx_1038 = 0.021*subx_1037 + subx_673;
    double subx_1039 = subx_550*subx_704;
    double subx_1040 = 0.021*subx_1039 + subx_694;
    double subx_1041 = 0.021*subx_550*subx_687 + subx_694;
    double subx_1042 = 0.115*subx_7;
    double subx_1043 = 0.115*subx_10;
    double subx_1044 = 0.115*subx_1;
    double subx_1045 = 0.115*subx_4;
    double subx_1046 = 0.115*subx_1*subx_21;
    double subx_1047 = 0.115*subx_27*subx_7;
    double subx_1048 = 0.115*subx_49;
    double subx_1049 = subx_1048*subx_965;
    double subx_1050 = 0.115*subx_12*subx_56;
    double subx_1051 = 0.115*subx_14*subx_62;
    double subx_1052 = 0.115*subx_39*subx_4;
    double subx_1053 = 0.115*subx_16*subx_67;
    double subx_1054 = 0.115*subx_18*subx_72;
    double subx_1055 = 0.115*subx_12*subx_53;
    double subx_1056 = 0.115*subx_16*subx_64;
    double subx_1057 = 0.115*subx_18*subx_69;
    double subx_1058 = 0.115*subx_1*subx_35;
    double subx_1059 = 0.115*subx_46;
    double subx_1060 = subx_1059*subx_962;
    double subx_1061 = 0.115*subx_14*subx_59;
    double subx_1062 = 0.115*subx_24*subx_4;
    double subx_1063 = subx_713*subx_731;
    double subx_1064 = subx_721*subx_734;
    double subx_1065 = subx_571*subx_725;
    double subx_1066 = subx_53*subx_953;
    double subx_1067 = subx_56*subx_914;
    double subx_1068 = subx_59*subx_954;
    double subx_1069 = subx_62*subx_918;
    double subx_1070 = subx_27*subx_938;
    double subx_1071 = subx_46*subx_938;
    double subx_1072 = 0.002415*subx_39*subx_563;
    double subx_1073 = -subx_1015*subx_59 + subx_1016*subx_59 - subx_1072*subx_654 - subx_1072*subx_656 + 0.002415*subx_563*subx_776 + subx_779*subx_849;
    double subx_1074 = subx_715*subx_732;
    double subx_1075 = subx_723*subx_735;
    double subx_1076 = -subx_575*subx_726;
    double subx_1077 = subx_21*subx_944;
    double subx_1078 = subx_35*subx_884;
    double subx_1079 = subx_39*subx_948;
    double subx_1080 = subx_24*subx_891;
    double subx_1081 = -subx_64*subx_901;
    double subx_1082 = -subx_67*subx_949;
    double subx_1083 = -subx_27*subx_955;
    double subx_1084 = -subx_46*subx_924;
    double subx_1085 = subx_21*subx_930;
    double subx_1086 = subx_35*subx_930;
    double subx_1087 = subx_39*subx_931;
    double subx_1088 = subx_24*subx_931;
    double subx_1089 = 0.115*subx_27;
    double subx_1090 = subx_1089*subx_969;
    double subx_1091 = subx_1009*subx_1059;
    double subx_1092 = subx_1002*subx_988;
    double subx_1093 = 0.115*subx_35;
    double subx_1094 = subx_1013*subx_1093;
    double subx_1095 = 0.115*subx_39;
    double subx_1096 = subx_1073*subx_1095;
    double subx_1097 = subx_1017*subx_984;
    double subx_1098 = -0.0075816*subx_548 - 0.0075816*subx_550;
    double subx_1099 = subx_1002*subx_1005;
    double subx_1100 = subx_1006*subx_1095;
    double subx_1101 = subx_1093*subx_977;
    double subx_1102 = subx_981*subx_984;
    double subx_1103 = -subx_1021*subx_1089;
    double subx_1104 = -subx_1059*subx_994;
    double subx_1105 = subx_548*subx_677;
    double subx_1106 = subx_1008*subx_1038;
    double subx_1107 = subx_1062*subx_679;
    double subx_1108 = subx_1059*subx_688*subx_7;
    double subx_1109 = subx_1002*subx_1040*subx_12;
    double subx_1110 = 0.115*subx_1041*subx_16;
    double subx_1111 = subx_1110*subx_46;
    double subx_1112 = subx_1058*subx_706;
    double subx_1113 = subx_1038*subx_14*subx_984;
    double subx_1114 = subx_1052*subx_679;
    double subx_1115 = -subx_1047*subx_688;
    double subx_1116 = subx_1040*subx_960;
    double subx_1117 = -subx_1110*subx_27;
    double subx_1118 = subx_1046*subx_706;
    double subx_1119 = 0.115*subx_30;
    double subx_1120 = -subx_10*subx_1048*subx_697 - subx_1000*subx_1119 + subx_1010*subx_1119 - subx_1024*subx_1048 + subx_1036*subx_30*subx_821 - subx_1036*subx_966 + subx_1043*subx_30*subx_697 + subx_1048*subx_973 - subx_30*subx_929 + subx_30*subx_941 + subx_49*subx_941 - subx_49*subx_956 + subx_584*subx_728 - subx_587*subx_729 - subx_69*subx_911 - subx_72*subx_952;
    double subx_1121 = 0.0190918830920368*subx_672;
    double subx_1122 = 0.075*subx_1035 + subx_1121;
    double subx_1123 = 0.075*subx_1037 + subx_1121;
    double subx_1124 = -0.075*subx_1105 + subx_1121;
    double subx_1125 = -0.0190918830920368*subx_548 - 0.0190918830920368*subx_550;
    double subx_1126 = subx_1121 - subx_1125*subx_548;
    double subx_1127 = -subx_1121;
    double subx_1128 = 0.075*subx_1039 + subx_1127;
    double subx_1129 = subx_1125*subx_550 + subx_1127;
    double subx_1130 = subx_1127 - 0.075*subx_696;
    double subx_1131 = subx_1127 - 0.075*subx_705;
    double subx_1132 = 0.0190918830920368*subx_576;
    double subx_1133 = 0.0190918830920368*subx_578;
    double subx_1134 = subx_1132 + subx_1133;
    double subx_1135 = -subx_1133;
    double subx_1136 = subx_1132 + subx_1135;
    double subx_1137 = -subx_1132;
    double subx_1138 = subx_1133 + subx_1137;
    double subx_1139 = subx_1135 + subx_1137;
    double subx_1140 = 0.0106914545315406*subx_672;
    double subx_1141 = subx_1140 + 0.042*subx_550*subx_695;
    double subx_1142 = subx_1140 + 0.042*subx_550*subx_677;
    double subx_1143 = 4*subx_193*subx_194;
    double subx_1144 = subx_1143 - 4*subx_189*subx_190;
    double subx_1145 = -0.0106914545315406*subx_672;
    double subx_1146 = subx_1145 + 0.042*subx_550*subx_704;
    double subx_1147 = subx_1145 + 0.042*subx_550*subx_687;
    double subx_1148 = 4*subx_189*subx_194 + 4*subx_190*subx_193;
    double subx_1149 = subx_1143 + 4*subx_189*subx_190;
    double subx_1150 = -2*subx_199;
    double subx_1151 = 2*subx_198;
    double subx_1152 = subx_1150 + subx_1151 + 2*subx_200 - 2*subx_202;
    double subx_1153 = 4*subx_189*subx_193;
    double subx_1154 = subx_1153 - 4*subx_190*subx_194;
    double subx_1155 = subx_1153 + 4*subx_190*subx_194;
    double subx_1156 = subx_1150 + subx_1151 - 2*subx_200 + 2*subx_202;
    double subx_1157 = 0.138*sqrt(3);
    double subx_1158 = 0.1725*subx_864;
    double subx_1159 = 0.000277725*subx_842;
    double subx_1160 = 0.000277725*subx_844;
    double subx_1161 = 0.1725*subx_814;
    double subx_1162 = 0.000277725*subx_558;
    double subx_1163 = subx_1162*subx_654;
    double subx_1164 = subx_1162*subx_656;
    double subx_1165 = 0.1725*subx_1027;
    double subx_1166 = 0.000277725*subx_830;
    double subx_1167 = 0.000277725*subx_832;
    double subx_1168 = 0.1725*subx_1033;
    double subx_1169 = 0.000277725*subx_560;
    double subx_1170 = subx_1169*subx_613;
    double subx_1171 = subx_1169*subx_615;

    Eigen::Matrix<double,37,37> ret;
    ret(0,0) = 1;
    ret(0,1) = 0;
    ret(0,2) = 0;
    ret(0,3) = 0;
    ret(0,4) = 0;
    ret(0,5) = 0;
    ret(0,6) = 0;
    ret(0,7) = 0;
    ret(0,8) = 0;
    ret(0,9) = 0;
    ret(0,10) = 0;
    ret(0,11) = 0;
    ret(0,12) = 0;
    ret(0,13) = 0;
    ret(0,14) = 0;
    ret(0,15) = 0;
    ret(0,16) = 0;
    ret(0,17) = 0;
    ret(0,18) = 0;
    ret(0,19) = 0;
    ret(0,20) = 0;
    ret(0,21) = 0;
    ret(0,22) = 0;
    ret(0,23) = 0;
    ret(0,24) = 0;
    ret(0,25) = 0;
    ret(0,26) = 0;
    ret(0,27) = 0;
    ret(0,28) = 0;
    ret(0,29) = 0;
    ret(0,30) = 0;
    ret(0,31) = 0;
    ret(0,32) = 0;
    ret(0,33) = 0;
    ret(0,34) = 0;
    ret(0,35) = 0;
    ret(0,36) = 0;
    ret(1,0) = 0;
    ret(1,1) = 1;
    ret(1,2) = 0;
    ret(1,3) = 0;
    ret(1,4) = 0;
    ret(1,5) = 0;
    ret(1,6) = 0;
    ret(1,7) = 0;
    ret(1,8) = 0;
    ret(1,9) = 0;
    ret(1,10) = 0;
    ret(1,11) = 0;
    ret(1,12) = 0;
    ret(1,13) = 0;
    ret(1,14) = 0;
    ret(1,15) = 0;
    ret(1,16) = 0;
    ret(1,17) = 0;
    ret(1,18) = 0;
    ret(1,19) = 0;
    ret(1,20) = 0;
    ret(1,21) = 0;
    ret(1,22) = 0;
    ret(1,23) = 0;
    ret(1,24) = 0;
    ret(1,25) = 0;
    ret(1,26) = 0;
    ret(1,27) = 0;
    ret(1,28) = 0;
    ret(1,29) = 0;
    ret(1,30) = 0;
    ret(1,31) = 0;
    ret(1,32) = 0;
    ret(1,33) = 0;
    ret(1,34) = 0;
    ret(1,35) = 0;
    ret(1,36) = 0;
    ret(2,0) = 0;
    ret(2,1) = 0;
    ret(2,2) = 1;
    ret(2,3) = 0;
    ret(2,4) = 0;
    ret(2,5) = 0;
    ret(2,6) = 0;
    ret(2,7) = 0;
    ret(2,8) = 0;
    ret(2,9) = 0;
    ret(2,10) = 0;
    ret(2,11) = 0;
    ret(2,12) = 0;
    ret(2,13) = 0;
    ret(2,14) = 0;
    ret(2,15) = 0;
    ret(2,16) = 0;
    ret(2,17) = 0;
    ret(2,18) = 0;
    ret(2,19) = 0;
    ret(2,20) = 0;
    ret(2,21) = 0;
    ret(2,22) = 0;
    ret(2,23) = 0;
    ret(2,24) = 0;
    ret(2,25) = 0;
    ret(2,26) = 0;
    ret(2,27) = 0;
    ret(2,28) = 0;
    ret(2,29) = 0;
    ret(2,30) = 0;
    ret(2,31) = 0;
    ret(2,32) = 0;
    ret(2,33) = 0;
    ret(2,34) = 0;
    ret(2,35) = 0;
    ret(2,36) = 0;
    ret(3,0) = 0;
    ret(3,1) = 0;
    ret(3,2) = 0;
    ret(3,3) = 1;
    ret(3,4) = 0;
    ret(3,5) = 0;
    ret(3,6) = 0;
    ret(3,7) = 0;
    ret(3,8) = 0;
    ret(3,9) = 0;
    ret(3,10) = 0;
    ret(3,11) = 0;
    ret(3,12) = 0;
    ret(3,13) = 0;
    ret(3,14) = 0;
    ret(3,15) = 0;
    ret(3,16) = 0;
    ret(3,17) = 0;
    ret(3,18) = 0;
    ret(3,19) = 0;
    ret(3,20) = 0;
    ret(3,21) = 0;
    ret(3,22) = 0;
    ret(3,23) = 0;
    ret(3,24) = 0;
    ret(3,25) = 0;
    ret(3,26) = 0;
    ret(3,27) = 0;
    ret(3,28) = 0;
    ret(3,29) = 0;
    ret(3,30) = 0;
    ret(3,31) = 0;
    ret(3,32) = 0;
    ret(3,33) = 0;
    ret(3,34) = 0;
    ret(3,35) = 0;
    ret(3,36) = 0;
    ret(4,0) = 0;
    ret(4,1) = 0;
    ret(4,2) = 0;
    ret(4,3) = 0;
    ret(4,4) = 1;
    ret(4,5) = 0;
    ret(4,6) = 0;
    ret(4,7) = 0;
    ret(4,8) = 0;
    ret(4,9) = 0;
    ret(4,10) = 0;
    ret(4,11) = 0;
    ret(4,12) = 0;
    ret(4,13) = 0;
    ret(4,14) = 0;
    ret(4,15) = 0;
    ret(4,16) = 0;
    ret(4,17) = 0;
    ret(4,18) = 0;
    ret(4,19) = 0;
    ret(4,20) = 0;
    ret(4,21) = 0;
    ret(4,22) = 0;
    ret(4,23) = 0;
    ret(4,24) = 0;
    ret(4,25) = 0;
    ret(4,26) = 0;
    ret(4,27) = 0;
    ret(4,28) = 0;
    ret(4,29) = 0;
    ret(4,30) = 0;
    ret(4,31) = 0;
    ret(4,32) = 0;
    ret(4,33) = 0;
    ret(4,34) = 0;
    ret(4,35) = 0;
    ret(4,36) = 0;
    ret(5,0) = 0;
    ret(5,1) = 0;
    ret(5,2) = 0;
    ret(5,3) = 0;
    ret(5,4) = 0;
    ret(5,5) = 1;
    ret(5,6) = 0;
    ret(5,7) = 0;
    ret(5,8) = 0;
    ret(5,9) = 0;
    ret(5,10) = 0;
    ret(5,11) = 0;
    ret(5,12) = 0;
    ret(5,13) = 0;
    ret(5,14) = 0;
    ret(5,15) = 0;
    ret(5,16) = 0;
    ret(5,17) = 0;
    ret(5,18) = 0;
    ret(5,19) = 0;
    ret(5,20) = 0;
    ret(5,21) = 0;
    ret(5,22) = 0;
    ret(5,23) = 0;
    ret(5,24) = 0;
    ret(5,25) = 0;
    ret(5,26) = 0;
    ret(5,27) = 0;
    ret(5,28) = 0;
    ret(5,29) = 0;
    ret(5,30) = 0;
    ret(5,31) = 0;
    ret(5,32) = 0;
    ret(5,33) = 0;
    ret(5,34) = 0;
    ret(5,35) = 0;
    ret(5,36) = 0;
    ret(6,0) = 0;
    ret(6,1) = 0;
    ret(6,2) = 0;
    ret(6,3) = 0;
    ret(6,4) = 0;
    ret(6,5) = 0;
    ret(6,6) = 1;
    ret(6,7) = 0;
    ret(6,8) = 0;
    ret(6,9) = 0;
    ret(6,10) = 0;
    ret(6,11) = 0;
    ret(6,12) = 0;
    ret(6,13) = 0;
    ret(6,14) = 0;
    ret(6,15) = 0;
    ret(6,16) = 0;
    ret(6,17) = 0;
    ret(6,18) = 0;
    ret(6,19) = 0;
    ret(6,20) = 0;
    ret(6,21) = 0;
    ret(6,22) = 0;
    ret(6,23) = 0;
    ret(6,24) = 0;
    ret(6,25) = 0;
    ret(6,26) = 0;
    ret(6,27) = 0;
    ret(6,28) = 0;
    ret(6,29) = 0;
    ret(6,30) = 0;
    ret(6,31) = 0;
    ret(6,32) = 0;
    ret(6,33) = 0;
    ret(6,34) = 0;
    ret(6,35) = 0;
    ret(6,36) = 0;
    ret(7,0) = 0;
    ret(7,1) = 0;
    ret(7,2) = 0;
    ret(7,3) = 0;
    ret(7,4) = 0;
    ret(7,5) = 0;
    ret(7,6) = 0;
    ret(7,7) = 1;
    ret(7,8) = 0;
    ret(7,9) = 0;
    ret(7,10) = 0;
    ret(7,11) = 0;
    ret(7,12) = 0;
    ret(7,13) = 0;
    ret(7,14) = 0;
    ret(7,15) = 0;
    ret(7,16) = 0;
    ret(7,17) = 0;
    ret(7,18) = 0;
    ret(7,19) = 0;
    ret(7,20) = 0;
    ret(7,21) = 0;
    ret(7,22) = 0;
    ret(7,23) = 0;
    ret(7,24) = 0;
    ret(7,25) = 0;
    ret(7,26) = 0;
    ret(7,27) = 0;
    ret(7,28) = 0;
    ret(7,29) = 0;
    ret(7,30) = 0;
    ret(7,31) = 0;
    ret(7,32) = 0;
    ret(7,33) = 0;
    ret(7,34) = 0;
    ret(7,35) = 0;
    ret(7,36) = 0;
    ret(8,0) = 0;
    ret(8,1) = 0;
    ret(8,2) = 0;
    ret(8,3) = 0;
    ret(8,4) = 0;
    ret(8,5) = 0;
    ret(8,6) = 0;
    ret(8,7) = 0;
    ret(8,8) = 1;
    ret(8,9) = 0;
    ret(8,10) = 0;
    ret(8,11) = 0;
    ret(8,12) = 0;
    ret(8,13) = 0;
    ret(8,14) = 0;
    ret(8,15) = 0;
    ret(8,16) = 0;
    ret(8,17) = 0;
    ret(8,18) = 0;
    ret(8,19) = 0;
    ret(8,20) = 0;
    ret(8,21) = 0;
    ret(8,22) = 0;
    ret(8,23) = 0;
    ret(8,24) = 0;
    ret(8,25) = 0;
    ret(8,26) = 0;
    ret(8,27) = 0;
    ret(8,28) = 0;
    ret(8,29) = 0;
    ret(8,30) = 0;
    ret(8,31) = 0;
    ret(8,32) = 0;
    ret(8,33) = 0;
    ret(8,34) = 0;
    ret(8,35) = 0;
    ret(8,36) = 0;
    ret(9,0) = 0;
    ret(9,1) = 0;
    ret(9,2) = 0;
    ret(9,3) = 0;
    ret(9,4) = 0;
    ret(9,5) = 0;
    ret(9,6) = 0;
    ret(9,7) = 0;
    ret(9,8) = 0;
    ret(9,9) = 1;
    ret(9,10) = 0;
    ret(9,11) = 0;
    ret(9,12) = 0;
    ret(9,13) = 0;
    ret(9,14) = 0;
    ret(9,15) = 0;
    ret(9,16) = 0;
    ret(9,17) = 0;
    ret(9,18) = 0;
    ret(9,19) = 0;
    ret(9,20) = 0;
    ret(9,21) = 0;
    ret(9,22) = 0;
    ret(9,23) = 0;
    ret(9,24) = 0;
    ret(9,25) = 0;
    ret(9,26) = 0;
    ret(9,27) = 0;
    ret(9,28) = 0;
    ret(9,29) = 0;
    ret(9,30) = 0;
    ret(9,31) = 0;
    ret(9,32) = 0;
    ret(9,33) = 0;
    ret(9,34) = 0;
    ret(9,35) = 0;
    ret(9,36) = 0;
    ret(10,0) = 0;
    ret(10,1) = 0;
    ret(10,2) = 0;
    ret(10,3) = 0;
    ret(10,4) = 0;
    ret(10,5) = 0;
    ret(10,6) = 0;
    ret(10,7) = 0;
    ret(10,8) = 0;
    ret(10,9) = 0;
    ret(10,10) = 1;
    ret(10,11) = 0;
    ret(10,12) = 0;
    ret(10,13) = 0;
    ret(10,14) = 0;
    ret(10,15) = 0;
    ret(10,16) = 0;
    ret(10,17) = 0;
    ret(10,18) = 0;
    ret(10,19) = 0;
    ret(10,20) = 0;
    ret(10,21) = 0;
    ret(10,22) = 0;
    ret(10,23) = 0;
    ret(10,24) = 0;
    ret(10,25) = 0;
    ret(10,26) = 0;
    ret(10,27) = 0;
    ret(10,28) = 0;
    ret(10,29) = 0;
    ret(10,30) = 0;
    ret(10,31) = 0;
    ret(10,32) = 0;
    ret(10,33) = 0;
    ret(10,34) = 0;
    ret(10,35) = 0;
    ret(10,36) = 0;
    ret(11,0) = 0;
    ret(11,1) = 0;
    ret(11,2) = 0;
    ret(11,3) = 0;
    ret(11,4) = 0;
    ret(11,5) = 0;
    ret(11,6) = 0;
    ret(11,7) = 0;
    ret(11,8) = 0;
    ret(11,9) = 0;
    ret(11,10) = 0;
    ret(11,11) = 1;
    ret(11,12) = 0;
    ret(11,13) = 0;
    ret(11,14) = 0;
    ret(11,15) = 0;
    ret(11,16) = 0;
    ret(11,17) = 0;
    ret(11,18) = 0;
    ret(11,19) = 0;
    ret(11,20) = 0;
    ret(11,21) = 0;
    ret(11,22) = 0;
    ret(11,23) = 0;
    ret(11,24) = 0;
    ret(11,25) = 0;
    ret(11,26) = 0;
    ret(11,27) = 0;
    ret(11,28) = 0;
    ret(11,29) = 0;
    ret(11,30) = 0;
    ret(11,31) = 0;
    ret(11,32) = 0;
    ret(11,33) = 0;
    ret(11,34) = 0;
    ret(11,35) = 0;
    ret(11,36) = 0;
    ret(12,0) = 0;
    ret(12,1) = 0;
    ret(12,2) = 0;
    ret(12,3) = 0;
    ret(12,4) = 0;
    ret(12,5) = 0;
    ret(12,6) = 0;
    ret(12,7) = 0;
    ret(12,8) = 0;
    ret(12,9) = 0;
    ret(12,10) = 0;
    ret(12,11) = 0;
    ret(12,12) = 1;
    ret(12,13) = 0;
    ret(12,14) = 0;
    ret(12,15) = 0;
    ret(12,16) = 0;
    ret(12,17) = 0;
    ret(12,18) = 0;
    ret(12,19) = 0;
    ret(12,20) = 0;
    ret(12,21) = 0;
    ret(12,22) = 0;
    ret(12,23) = 0;
    ret(12,24) = 0;
    ret(12,25) = 0;
    ret(12,26) = 0;
    ret(12,27) = 0;
    ret(12,28) = 0;
    ret(12,29) = 0;
    ret(12,30) = 0;
    ret(12,31) = 0;
    ret(12,32) = 0;
    ret(12,33) = 0;
    ret(12,34) = 0;
    ret(12,35) = 0;
    ret(12,36) = 0;
    ret(13,0) = 0;
    ret(13,1) = 0;
    ret(13,2) = 0;
    ret(13,3) = 0;
    ret(13,4) = 0;
    ret(13,5) = 0;
    ret(13,6) = 0;
    ret(13,7) = 0;
    ret(13,8) = 0;
    ret(13,9) = 0;
    ret(13,10) = 0;
    ret(13,11) = 0;
    ret(13,12) = 0;
    ret(13,13) = 1;
    ret(13,14) = 0;
    ret(13,15) = 0;
    ret(13,16) = 0;
    ret(13,17) = 0;
    ret(13,18) = 0;
    ret(13,19) = 0;
    ret(13,20) = 0;
    ret(13,21) = 0;
    ret(13,22) = 0;
    ret(13,23) = 0;
    ret(13,24) = 0;
    ret(13,25) = 0;
    ret(13,26) = 0;
    ret(13,27) = 0;
    ret(13,28) = 0;
    ret(13,29) = 0;
    ret(13,30) = 0;
    ret(13,31) = 0;
    ret(13,32) = 0;
    ret(13,33) = 0;
    ret(13,34) = 0;
    ret(13,35) = 0;
    ret(13,36) = 0;
    ret(14,0) = 0;
    ret(14,1) = 0;
    ret(14,2) = 0;
    ret(14,3) = 0;
    ret(14,4) = 0;
    ret(14,5) = 0;
    ret(14,6) = 0;
    ret(14,7) = 0;
    ret(14,8) = 0;
    ret(14,9) = 0;
    ret(14,10) = 0;
    ret(14,11) = 0;
    ret(14,12) = 0;
    ret(14,13) = 0;
    ret(14,14) = 1;
    ret(14,15) = 0;
    ret(14,16) = 0;
    ret(14,17) = 0;
    ret(14,18) = 0;
    ret(14,19) = 0;
    ret(14,20) = 0;
    ret(14,21) = 0;
    ret(14,22) = 0;
    ret(14,23) = 0;
    ret(14,24) = 0;
    ret(14,25) = 0;
    ret(14,26) = 0;
    ret(14,27) = 0;
    ret(14,28) = 0;
    ret(14,29) = 0;
    ret(14,30) = 0;
    ret(14,31) = 0;
    ret(14,32) = 0;
    ret(14,33) = 0;
    ret(14,34) = 0;
    ret(14,35) = 0;
    ret(14,36) = 0;
    ret(15,0) = 0;
    ret(15,1) = 0;
    ret(15,2) = 0;
    ret(15,3) = 0;
    ret(15,4) = 0;
    ret(15,5) = 0;
    ret(15,6) = 0;
    ret(15,7) = 0;
    ret(15,8) = 0;
    ret(15,9) = 0;
    ret(15,10) = 0;
    ret(15,11) = 0;
    ret(15,12) = 0;
    ret(15,13) = 0;
    ret(15,14) = 0;
    ret(15,15) = 1;
    ret(15,16) = 0;
    ret(15,17) = 0;
    ret(15,18) = 0;
    ret(15,19) = 0;
    ret(15,20) = 0;
    ret(15,21) = 0;
    ret(15,22) = 0;
    ret(15,23) = 0;
    ret(15,24) = 0;
    ret(15,25) = 0;
    ret(15,26) = 0;
    ret(15,27) = 0;
    ret(15,28) = 0;
    ret(15,29) = 0;
    ret(15,30) = 0;
    ret(15,31) = 0;
    ret(15,32) = 0;
    ret(15,33) = 0;
    ret(15,34) = 0;
    ret(15,35) = 0;
    ret(15,36) = 0;
    ret(16,0) = 0;
    ret(16,1) = 0;
    ret(16,2) = 0;
    ret(16,3) = 0;
    ret(16,4) = 0;
    ret(16,5) = 0;
    ret(16,6) = 0;
    ret(16,7) = 0;
    ret(16,8) = 0;
    ret(16,9) = 0;
    ret(16,10) = 0;
    ret(16,11) = 0;
    ret(16,12) = 0;
    ret(16,13) = 0;
    ret(16,14) = 0;
    ret(16,15) = 0;
    ret(16,16) = 1;
    ret(16,17) = 0;
    ret(16,18) = 0;
    ret(16,19) = 0;
    ret(16,20) = 0;
    ret(16,21) = 0;
    ret(16,22) = 0;
    ret(16,23) = 0;
    ret(16,24) = 0;
    ret(16,25) = 0;
    ret(16,26) = 0;
    ret(16,27) = 0;
    ret(16,28) = 0;
    ret(16,29) = 0;
    ret(16,30) = 0;
    ret(16,31) = 0;
    ret(16,32) = 0;
    ret(16,33) = 0;
    ret(16,34) = 0;
    ret(16,35) = 0;
    ret(16,36) = 0;
    ret(17,0) = 0;
    ret(17,1) = 0;
    ret(17,2) = 0;
    ret(17,3) = 0;
    ret(17,4) = 0;
    ret(17,5) = 0;
    ret(17,6) = 0;
    ret(17,7) = 0;
    ret(17,8) = 0;
    ret(17,9) = 0;
    ret(17,10) = 0;
    ret(17,11) = 0;
    ret(17,12) = 0;
    ret(17,13) = 0;
    ret(17,14) = 0;
    ret(17,15) = 0;
    ret(17,16) = 0;
    ret(17,17) = 1;
    ret(17,18) = 0;
    ret(17,19) = 0;
    ret(17,20) = 0;
    ret(17,21) = 0;
    ret(17,22) = 0;
    ret(17,23) = 0;
    ret(17,24) = 0;
    ret(17,25) = 0;
    ret(17,26) = 0;
    ret(17,27) = 0;
    ret(17,28) = 0;
    ret(17,29) = 0;
    ret(17,30) = 0;
    ret(17,31) = 0;
    ret(17,32) = 0;
    ret(17,33) = 0;
    ret(17,34) = 0;
    ret(17,35) = 0;
    ret(17,36) = 0;
    ret(18,0) = 0;
    ret(18,1) = 0;
    ret(18,2) = 0;
    ret(18,3) = 0;
    ret(18,4) = 0;
    ret(18,5) = 0;
    ret(18,6) = 0;
    ret(18,7) = 0;
    ret(18,8) = 0;
    ret(18,9) = 0;
    ret(18,10) = 0;
    ret(18,11) = 0;
    ret(18,12) = 0;
    ret(18,13) = 0;
    ret(18,14) = 0;
    ret(18,15) = 0;
    ret(18,16) = 0;
    ret(18,17) = 0;
    ret(18,18) = 1;
    ret(18,19) = 0;
    ret(18,20) = 0;
    ret(18,21) = 0;
    ret(18,22) = 0;
    ret(18,23) = 0;
    ret(18,24) = 0;
    ret(18,25) = 0;
    ret(18,26) = 0;
    ret(18,27) = 0;
    ret(18,28) = 0;
    ret(18,29) = 0;
    ret(18,30) = 0;
    ret(18,31) = 0;
    ret(18,32) = 0;
    ret(18,33) = 0;
    ret(18,34) = 0;
    ret(18,35) = 0;
    ret(18,36) = 0;
    ret(19,0) = 0;
    ret(19,1) = 0;
    ret(19,2) = 0;
    ret(19,3) = 0;
    ret(19,4) = 0;
    ret(19,5) = 0;
    ret(19,6) = 0;
    ret(19,7) = 0;
    ret(19,8) = 0;
    ret(19,9) = 0;
    ret(19,10) = 0;
    ret(19,11) = 0;
    ret(19,12) = 0;
    ret(19,13) = 0;
    ret(19,14) = 0;
    ret(19,15) = 0;
    ret(19,16) = 0;
    ret(19,17) = 0;
    ret(19,18) = 0;
    ret(19,19) = subx_11*subx_71 + subx_11*subx_74 + 3.1e-5*subx_11 + 0.00076845*subx_13 + 0.00076845*subx_15 + 0.00076845*subx_17 + 0.00076845*subx_19 + subx_2*subx_33 + subx_2*subx_37 + subx_2*subx_55 + subx_2*subx_58 + 3.1e-5*subx_2 + 0.00122951727112717*subx_22 + 0.00122951727112717*subx_25 + subx_27*subx_28 - subx_28*subx_46 + subx_30*subx_31 - subx_31*subx_49 + subx_40*subx_41 + subx_41*subx_42 + subx_43*subx_44 + subx_44*subx_47 + 3.1e-5*subx_5 + subx_50*subx_51 + subx_51*subx_52 + subx_60*subx_61 + subx_61*subx_63 + subx_65*subx_66 + subx_66*subx_68 - 0.00122951727112717*subx_75 - 0.00122951727112717*subx_76 + 3.1e-5*subx_8 + 0.0723264;
    ret(19,20) = subx_114;
    ret(19,21) = subx_119*subx_120 - subx_120*subx_147 + subx_125*subx_126 - subx_126*subx_150 + subx_131*subx_132 - subx_132*subx_141 + subx_137*subx_138 - subx_138*subx_144 + subx_151*subx_152 + subx_153*subx_154 + subx_155*subx_156 + subx_157*subx_158 - subx_159*subx_160 - subx_161*subx_162 - subx_163*subx_164 - subx_165*subx_166 + subx_169 + subx_171 + subx_174 + subx_177 + subx_180 + subx_183 + subx_186 + subx_188;
    ret(19,22) = subx_254;
    ret(19,23) = subx_300;
    ret(19,24) = subx_353;
    ret(19,25) = subx_354;
    ret(19,26) = subx_355;
    ret(19,27) = subx_356;
    ret(19,28) = subx_357;
    ret(19,29) = subx_359;
    ret(19,30) = subx_360;
    ret(19,31) = subx_362;
    ret(19,32) = subx_363;
    ret(19,33) = subx_365;
    ret(19,34) = subx_366;
    ret(19,35) = subx_369;
    ret(19,36) = subx_371;
    ret(20,0) = 0;
    ret(20,1) = 0;
    ret(20,2) = 0;
    ret(20,3) = 0;
    ret(20,4) = 0;
    ret(20,5) = 0;
    ret(20,6) = 0;
    ret(20,7) = 0;
    ret(20,8) = 0;
    ret(20,9) = 0;
    ret(20,10) = 0;
    ret(20,11) = 0;
    ret(20,12) = 0;
    ret(20,13) = 0;
    ret(20,14) = 0;
    ret(20,15) = 0;
    ret(20,16) = 0;
    ret(20,17) = 0;
    ret(20,18) = 0;
    ret(20,19) = subx_114;
    ret(20,20) = 0.00076845*subx_11 + subx_13*subx_33 + subx_13*subx_37 + subx_13*subx_55 + subx_13*subx_58 + 3.1e-5*subx_13 + 3.1e-5*subx_15 + 0.00122951727112717*subx_167 + 3.1e-5*subx_17 - 0.00122951727112717*subx_170 + 0.00122951727112717*subx_181 + 0.00122951727112717*subx_187 + subx_19*subx_71 + subx_19*subx_74 + 3.1e-5*subx_19 + 0.00076845*subx_2 + 0.00122951727112717*subx_372 + subx_373*subx_40 + subx_373*subx_42 + subx_374*subx_43 + subx_374*subx_47 + subx_375*subx_50 + subx_375*subx_52 + subx_376*subx_60 + subx_376*subx_63 + subx_377*subx_65 + subx_377*subx_68 - 0.00122951727112717*subx_378 - 0.00122951727112717*subx_379 - 0.00122951727112717*subx_380 + 0.00076845*subx_5 + 0.00076845*subx_8 + 0.0923264;
    ret(20,21) = -subx_119*subx_383 + subx_125*subx_382 - subx_131*subx_381 + subx_137*subx_350 + subx_141*subx_381 - subx_144*subx_350 + subx_147*subx_383 - subx_150*subx_382 + subx_151*subx_384 - subx_153*subx_389 + subx_155*subx_386 - subx_157*subx_391 - subx_159*subx_388 + subx_161*subx_385 - subx_163*subx_390 + subx_165*subx_387 + subx_392 + subx_393 + subx_395 + subx_397 + subx_399 + subx_401 + subx_403 + subx_405;
    ret(20,22) = subx_406;
    ret(20,23) = subx_407;
    ret(20,24) = subx_408;
    ret(20,25) = subx_409;
    ret(20,26) = subx_410;
    ret(20,27) = subx_411;
    ret(20,28) = subx_412;
    ret(20,29) = subx_414;
    ret(20,30) = subx_415;
    ret(20,31) = subx_417;
    ret(20,32) = subx_418;
    ret(20,33) = subx_420;
    ret(20,34) = subx_421;
    ret(20,35) = subx_423;
    ret(20,36) = subx_424;
    ret(21,0) = 0;
    ret(21,1) = 0;
    ret(21,2) = 0;
    ret(21,3) = 0;
    ret(21,4) = 0;
    ret(21,5) = 0;
    ret(21,6) = 0;
    ret(21,7) = 0;
    ret(21,8) = 0;
    ret(21,9) = 0;
    ret(21,10) = 0;
    ret(21,11) = 0;
    ret(21,12) = 0;
    ret(21,13) = 0;
    ret(21,14) = 0;
    ret(21,15) = 0;
    ret(21,16) = 0;
    ret(21,17) = 0;
    ret(21,18) = 0;
    ret(21,19) = subx_169 + subx_171 + subx_174 + subx_177 + subx_180 + subx_183 + subx_186 + subx_188 + subx_426 + subx_428 + subx_430 + subx_431 - subx_433 - subx_435 - subx_436 - subx_437 + subx_444;
    ret(21,20) = subx_392 + subx_393 + subx_395 + subx_397 + subx_399 + subx_401 + subx_403 + subx_405 - subx_426 - subx_428 - subx_430 - subx_431 + subx_433 + subx_435 + subx_436 + subx_437 + subx_444;
    ret(21,21) = subx_113 + subx_445 + subx_446 + subx_447 + subx_448 + subx_449 + subx_450 + subx_451 + subx_452 + subx_453 + subx_454 + subx_455 + subx_456 + subx_457 + subx_458 + subx_459 + subx_460 + subx_462 + subx_464 + subx_466 + subx_468 - subx_470 - subx_472 - subx_474 - subx_476 - subx_78 - subx_79 - subx_81 - subx_82 + subx_84 + subx_86 + subx_89 + subx_91 + 0.1529048;
    ret(21,22) = subx_484;
    ret(21,23) = subx_492;
    ret(21,24) = subx_500;
    ret(21,25) = subx_501 + subx_78 + subx_79 + subx_85 + subx_87;
    ret(21,26) = subx_502 + subx_81 + subx_82 + subx_90 + subx_92;
    ret(21,27) = subx_102 + subx_103 + subx_108 + subx_109 + subx_503;
    ret(21,28) = subx_105 + subx_106 + subx_111 + subx_112 + subx_504;
    ret(21,29) = subx_505;
    ret(21,30) = subx_506;
    ret(21,31) = subx_507;
    ret(21,32) = subx_508;
    ret(21,33) = subx_510;
    ret(21,34) = subx_511;
    ret(21,35) = subx_512;
    ret(21,36) = subx_514;
    ret(22,0) = 0;
    ret(22,1) = 0;
    ret(22,2) = 0;
    ret(22,3) = 0;
    ret(22,4) = 0;
    ret(22,5) = 0;
    ret(22,6) = 0;
    ret(22,7) = 0;
    ret(22,8) = 0;
    ret(22,9) = 0;
    ret(22,10) = 0;
    ret(22,11) = 0;
    ret(22,12) = 0;
    ret(22,13) = 0;
    ret(22,14) = 0;
    ret(22,15) = 0;
    ret(22,16) = 0;
    ret(22,17) = 0;
    ret(22,18) = 0;
    ret(22,19) = subx_254;
    ret(22,20) = subx_406;
    ret(22,21) = subx_484;
    ret(22,22) = 3.06800000000000;
    ret(22,23) = 0;
    ret(22,24) = 0;
    ret(22,25) = subx_515;
    ret(22,26) = subx_516;
    ret(22,27) = subx_483;
    ret(22,28) = subx_517;
    ret(22,29) = subx_518;
    ret(22,30) = subx_519;
    ret(22,31) = subx_520;
    ret(22,32) = subx_521;
    ret(22,33) = subx_522;
    ret(22,34) = subx_523;
    ret(22,35) = subx_524;
    ret(22,36) = subx_525;
    ret(23,0) = 0;
    ret(23,1) = 0;
    ret(23,2) = 0;
    ret(23,3) = 0;
    ret(23,4) = 0;
    ret(23,5) = 0;
    ret(23,6) = 0;
    ret(23,7) = 0;
    ret(23,8) = 0;
    ret(23,9) = 0;
    ret(23,10) = 0;
    ret(23,11) = 0;
    ret(23,12) = 0;
    ret(23,13) = 0;
    ret(23,14) = 0;
    ret(23,15) = 0;
    ret(23,16) = 0;
    ret(23,17) = 0;
    ret(23,18) = 0;
    ret(23,19) = subx_300;
    ret(23,20) = subx_407;
    ret(23,21) = subx_492;
    ret(23,22) = 0;
    ret(23,23) = 3.06800000000000;
    ret(23,24) = 0;
    ret(23,25) = subx_526;
    ret(23,26) = subx_527;
    ret(23,27) = subx_491;
    ret(23,28) = subx_528;
    ret(23,29) = subx_529;
    ret(23,30) = subx_530;
    ret(23,31) = subx_531;
    ret(23,32) = subx_532;
    ret(23,33) = subx_533;
    ret(23,34) = subx_534;
    ret(23,35) = subx_535;
    ret(23,36) = subx_536;
    ret(24,0) = 0;
    ret(24,1) = 0;
    ret(24,2) = 0;
    ret(24,3) = 0;
    ret(24,4) = 0;
    ret(24,5) = 0;
    ret(24,6) = 0;
    ret(24,7) = 0;
    ret(24,8) = 0;
    ret(24,9) = 0;
    ret(24,10) = 0;
    ret(24,11) = 0;
    ret(24,12) = 0;
    ret(24,13) = 0;
    ret(24,14) = 0;
    ret(24,15) = 0;
    ret(24,16) = 0;
    ret(24,17) = 0;
    ret(24,18) = 0;
    ret(24,19) = subx_353;
    ret(24,20) = subx_408;
    ret(24,21) = subx_500;
    ret(24,22) = 0;
    ret(24,23) = 0;
    ret(24,24) = 3.06800000000000;
    ret(24,25) = subx_537;
    ret(24,26) = subx_538;
    ret(24,27) = subx_499;
    ret(24,28) = subx_539;
    ret(24,29) = subx_540;
    ret(24,30) = subx_541;
    ret(24,31) = subx_542;
    ret(24,32) = subx_543;
    ret(24,33) = subx_544;
    ret(24,34) = subx_545;
    ret(24,35) = subx_546;
    ret(24,36) = subx_547;
    ret(25,0) = 0;
    ret(25,1) = 0;
    ret(25,2) = 0;
    ret(25,3) = 0;
    ret(25,4) = 0;
    ret(25,5) = 0;
    ret(25,6) = 0;
    ret(25,7) = 0;
    ret(25,8) = 0;
    ret(25,9) = 0;
    ret(25,10) = 0;
    ret(25,11) = 0;
    ret(25,12) = 0;
    ret(25,13) = 0;
    ret(25,14) = 0;
    ret(25,15) = 0;
    ret(25,16) = 0;
    ret(25,17) = 0;
    ret(25,18) = 0;
    ret(25,19) = subx_354;
    ret(25,20) = subx_409;
    ret(25,21) = subx_470 + subx_474 + subx_501;
    ret(25,22) = subx_515;
    ret(25,23) = subx_526;
    ret(25,24) = subx_537;
    ret(25,25) = subx_445 + subx_446 + subx_453 + subx_454 + 6.3e-5;
    ret(25,26) = 0;
    ret(25,27) = 0;
    ret(25,28) = 0;
    ret(25,29) = 0;
    ret(25,30) = 0;
    ret(25,31) = 0;
    ret(25,32) = 0;
    ret(25,33) = 0;
    ret(25,34) = 0;
    ret(25,35) = 0;
    ret(25,36) = 0;
    ret(26,0) = 0;
    ret(26,1) = 0;
    ret(26,2) = 0;
    ret(26,3) = 0;
    ret(26,4) = 0;
    ret(26,5) = 0;
    ret(26,6) = 0;
    ret(26,7) = 0;
    ret(26,8) = 0;
    ret(26,9) = 0;
    ret(26,10) = 0;
    ret(26,11) = 0;
    ret(26,12) = 0;
    ret(26,13) = 0;
    ret(26,14) = 0;
    ret(26,15) = 0;
    ret(26,16) = 0;
    ret(26,17) = 0;
    ret(26,18) = 0;
    ret(26,19) = subx_355;
    ret(26,20) = subx_410;
    ret(26,21) = subx_472 + subx_476 + subx_502;
    ret(26,22) = subx_516;
    ret(26,23) = subx_527;
    ret(26,24) = subx_538;
    ret(26,25) = 0;
    ret(26,26) = subx_447 + subx_448 + subx_455 + subx_456 + 6.3e-5;
    ret(26,27) = 0;
    ret(26,28) = 0;
    ret(26,29) = 0;
    ret(26,30) = 0;
    ret(26,31) = 0;
    ret(26,32) = 0;
    ret(26,33) = 0;
    ret(26,34) = 0;
    ret(26,35) = 0;
    ret(26,36) = 0;
    ret(27,0) = 0;
    ret(27,1) = 0;
    ret(27,2) = 0;
    ret(27,3) = 0;
    ret(27,4) = 0;
    ret(27,5) = 0;
    ret(27,6) = 0;
    ret(27,7) = 0;
    ret(27,8) = 0;
    ret(27,9) = 0;
    ret(27,10) = 0;
    ret(27,11) = 0;
    ret(27,12) = 0;
    ret(27,13) = 0;
    ret(27,14) = 0;
    ret(27,15) = 0;
    ret(27,16) = 0;
    ret(27,17) = 0;
    ret(27,18) = 0;
    ret(27,19) = subx_356;
    ret(27,20) = subx_411;
    ret(27,21) = subx_462 + subx_466 + subx_503;
    ret(27,22) = subx_483;
    ret(27,23) = subx_491;
    ret(27,24) = subx_499;
    ret(27,25) = 0;
    ret(27,26) = 0;
    ret(27,27) = subx_503;
    ret(27,28) = 0;
    ret(27,29) = 0;
    ret(27,30) = 0;
    ret(27,31) = 0;
    ret(27,32) = 0;
    ret(27,33) = 0;
    ret(27,34) = 0;
    ret(27,35) = 0;
    ret(27,36) = 0;
    ret(28,0) = 0;
    ret(28,1) = 0;
    ret(28,2) = 0;
    ret(28,3) = 0;
    ret(28,4) = 0;
    ret(28,5) = 0;
    ret(28,6) = 0;
    ret(28,7) = 0;
    ret(28,8) = 0;
    ret(28,9) = 0;
    ret(28,10) = 0;
    ret(28,11) = 0;
    ret(28,12) = 0;
    ret(28,13) = 0;
    ret(28,14) = 0;
    ret(28,15) = 0;
    ret(28,16) = 0;
    ret(28,17) = 0;
    ret(28,18) = 0;
    ret(28,19) = subx_357;
    ret(28,20) = subx_412;
    ret(28,21) = subx_464 + subx_468 + subx_504;
    ret(28,22) = subx_517;
    ret(28,23) = subx_528;
    ret(28,24) = subx_539;
    ret(28,25) = 0;
    ret(28,26) = 0;
    ret(28,27) = 0;
    ret(28,28) = subx_504;
    ret(28,29) = 0;
    ret(28,30) = 0;
    ret(28,31) = 0;
    ret(28,32) = 0;
    ret(28,33) = 0;
    ret(28,34) = 0;
    ret(28,35) = 0;
    ret(28,36) = 0;
    ret(29,0) = 0;
    ret(29,1) = 0;
    ret(29,2) = 0;
    ret(29,3) = 0;
    ret(29,4) = 0;
    ret(29,5) = 0;
    ret(29,6) = 0;
    ret(29,7) = 0;
    ret(29,8) = 0;
    ret(29,9) = 0;
    ret(29,10) = 0;
    ret(29,11) = 0;
    ret(29,12) = 0;
    ret(29,13) = 0;
    ret(29,14) = 0;
    ret(29,15) = 0;
    ret(29,16) = 0;
    ret(29,17) = 0;
    ret(29,18) = 0;
    ret(29,19) = subx_359;
    ret(29,20) = subx_414;
    ret(29,21) = subx_505;
    ret(29,22) = subx_518;
    ret(29,23) = subx_529;
    ret(29,24) = subx_540;
    ret(29,25) = 0;
    ret(29,26) = 0;
    ret(29,27) = 0;
    ret(29,28) = 0;
    ret(29,29) = 0.000368725000000000;
    ret(29,30) = 0;
    ret(29,31) = 0;
    ret(29,32) = 0;
    ret(29,33) = 0;
    ret(29,34) = 0;
    ret(29,35) = 0;
    ret(29,36) = 0;
    ret(30,0) = 0;
    ret(30,1) = 0;
    ret(30,2) = 0;
    ret(30,3) = 0;
    ret(30,4) = 0;
    ret(30,5) = 0;
    ret(30,6) = 0;
    ret(30,7) = 0;
    ret(30,8) = 0;
    ret(30,9) = 0;
    ret(30,10) = 0;
    ret(30,11) = 0;
    ret(30,12) = 0;
    ret(30,13) = 0;
    ret(30,14) = 0;
    ret(30,15) = 0;
    ret(30,16) = 0;
    ret(30,17) = 0;
    ret(30,18) = 0;
    ret(30,19) = subx_360;
    ret(30,20) = subx_415;
    ret(30,21) = subx_506;
    ret(30,22) = subx_519;
    ret(30,23) = subx_530;
    ret(30,24) = subx_541;
    ret(30,25) = 0;
    ret(30,26) = 0;
    ret(30,27) = 0;
    ret(30,28) = 0;
    ret(30,29) = 0;
    ret(30,30) = 0.000368725000000000;
    ret(30,31) = 0;
    ret(30,32) = 0;
    ret(30,33) = 0;
    ret(30,34) = 0;
    ret(30,35) = 0;
    ret(30,36) = 0;
    ret(31,0) = 0;
    ret(31,1) = 0;
    ret(31,2) = 0;
    ret(31,3) = 0;
    ret(31,4) = 0;
    ret(31,5) = 0;
    ret(31,6) = 0;
    ret(31,7) = 0;
    ret(31,8) = 0;
    ret(31,9) = 0;
    ret(31,10) = 0;
    ret(31,11) = 0;
    ret(31,12) = 0;
    ret(31,13) = 0;
    ret(31,14) = 0;
    ret(31,15) = 0;
    ret(31,16) = 0;
    ret(31,17) = 0;
    ret(31,18) = 0;
    ret(31,19) = subx_362;
    ret(31,20) = subx_417;
    ret(31,21) = subx_507;
    ret(31,22) = subx_520;
    ret(31,23) = subx_531;
    ret(31,24) = subx_542;
    ret(31,25) = 0;
    ret(31,26) = 0;
    ret(31,27) = 0;
    ret(31,28) = 0;
    ret(31,29) = 0;
    ret(31,30) = 0;
    ret(31,31) = 0.000368725000000000;
    ret(31,32) = 0;
    ret(31,33) = 0;
    ret(31,34) = 0;
    ret(31,35) = 0;
    ret(31,36) = 0;
    ret(32,0) = 0;
    ret(32,1) = 0;
    ret(32,2) = 0;
    ret(32,3) = 0;
    ret(32,4) = 0;
    ret(32,5) = 0;
    ret(32,6) = 0;
    ret(32,7) = 0;
    ret(32,8) = 0;
    ret(32,9) = 0;
    ret(32,10) = 0;
    ret(32,11) = 0;
    ret(32,12) = 0;
    ret(32,13) = 0;
    ret(32,14) = 0;
    ret(32,15) = 0;
    ret(32,16) = 0;
    ret(32,17) = 0;
    ret(32,18) = 0;
    ret(32,19) = subx_363;
    ret(32,20) = subx_418;
    ret(32,21) = subx_508;
    ret(32,22) = subx_521;
    ret(32,23) = subx_532;
    ret(32,24) = subx_543;
    ret(32,25) = 0;
    ret(32,26) = 0;
    ret(32,27) = 0;
    ret(32,28) = 0;
    ret(32,29) = 0;
    ret(32,30) = 0;
    ret(32,31) = 0;
    ret(32,32) = 0.000368725000000000;
    ret(32,33) = 0;
    ret(32,34) = 0;
    ret(32,35) = 0;
    ret(32,36) = 0;
    ret(33,0) = 0;
    ret(33,1) = 0;
    ret(33,2) = 0;
    ret(33,3) = 0;
    ret(33,4) = 0;
    ret(33,5) = 0;
    ret(33,6) = 0;
    ret(33,7) = 0;
    ret(33,8) = 0;
    ret(33,9) = 0;
    ret(33,10) = 0;
    ret(33,11) = 0;
    ret(33,12) = 0;
    ret(33,13) = 0;
    ret(33,14) = 0;
    ret(33,15) = 0;
    ret(33,16) = 0;
    ret(33,17) = 0;
    ret(33,18) = 0;
    ret(33,19) = subx_365;
    ret(33,20) = subx_420;
    ret(33,21) = subx_510;
    ret(33,22) = subx_522;
    ret(33,23) = subx_533;
    ret(33,24) = subx_544;
    ret(33,25) = 0;
    ret(33,26) = 0;
    ret(33,27) = 0;
    ret(33,28) = 0;
    ret(33,29) = 0;
    ret(33,30) = 0;
    ret(33,31) = 0;
    ret(33,32) = 0;
    ret(33,33) = 0.000368725000000000;
    ret(33,34) = 0;
    ret(33,35) = 0;
    ret(33,36) = 0;
    ret(34,0) = 0;
    ret(34,1) = 0;
    ret(34,2) = 0;
    ret(34,3) = 0;
    ret(34,4) = 0;
    ret(34,5) = 0;
    ret(34,6) = 0;
    ret(34,7) = 0;
    ret(34,8) = 0;
    ret(34,9) = 0;
    ret(34,10) = 0;
    ret(34,11) = 0;
    ret(34,12) = 0;
    ret(34,13) = 0;
    ret(34,14) = 0;
    ret(34,15) = 0;
    ret(34,16) = 0;
    ret(34,17) = 0;
    ret(34,18) = 0;
    ret(34,19) = subx_366;
    ret(34,20) = subx_421;
    ret(34,21) = subx_511;
    ret(34,22) = subx_523;
    ret(34,23) = subx_534;
    ret(34,24) = subx_545;
    ret(34,25) = 0;
    ret(34,26) = 0;
    ret(34,27) = 0;
    ret(34,28) = 0;
    ret(34,29) = 0;
    ret(34,30) = 0;
    ret(34,31) = 0;
    ret(34,32) = 0;
    ret(34,33) = 0;
    ret(34,34) = 0.000368725000000000;
    ret(34,35) = 0;
    ret(34,36) = 0;
    ret(35,0) = 0;
    ret(35,1) = 0;
    ret(35,2) = 0;
    ret(35,3) = 0;
    ret(35,4) = 0;
    ret(35,5) = 0;
    ret(35,6) = 0;
    ret(35,7) = 0;
    ret(35,8) = 0;
    ret(35,9) = 0;
    ret(35,10) = 0;
    ret(35,11) = 0;
    ret(35,12) = 0;
    ret(35,13) = 0;
    ret(35,14) = 0;
    ret(35,15) = 0;
    ret(35,16) = 0;
    ret(35,17) = 0;
    ret(35,18) = 0;
    ret(35,19) = subx_369;
    ret(35,20) = subx_423;
    ret(35,21) = subx_512;
    ret(35,22) = subx_524;
    ret(35,23) = subx_535;
    ret(35,24) = subx_546;
    ret(35,25) = 0;
    ret(35,26) = 0;
    ret(35,27) = 0;
    ret(35,28) = 0;
    ret(35,29) = 0;
    ret(35,30) = 0;
    ret(35,31) = 0;
    ret(35,32) = 0;
    ret(35,33) = 0;
    ret(35,34) = 0;
    ret(35,35) = 0.000368725000000000;
    ret(35,36) = 0;
    ret(36,0) = 0;
    ret(36,1) = 0;
    ret(36,2) = 0;
    ret(36,3) = 0;
    ret(36,4) = 0;
    ret(36,5) = 0;
    ret(36,6) = 0;
    ret(36,7) = 0;
    ret(36,8) = 0;
    ret(36,9) = 0;
    ret(36,10) = 0;
    ret(36,11) = 0;
    ret(36,12) = 0;
    ret(36,13) = 0;
    ret(36,14) = 0;
    ret(36,15) = 0;
    ret(36,16) = 0;
    ret(36,17) = 0;
    ret(36,18) = 0;
    ret(36,19) = subx_371;
    ret(36,20) = subx_424;
    ret(36,21) = subx_514;
    ret(36,22) = subx_525;
    ret(36,23) = subx_536;
    ret(36,24) = subx_547;
    ret(36,25) = 0;
    ret(36,26) = 0;
    ret(36,27) = 0;
    ret(36,28) = 0;
    ret(36,29) = 0;
    ret(36,30) = 0;
    ret(36,31) = 0;
    ret(36,32) = 0;
    ret(36,33) = 0;
    ret(36,34) = 0;
    ret(36,35) = 0;
    ret(36,36) = 0.000368725000000000;
    return ret;
}

Eigen::Matrix<double,37,1> get_fo(Eigen::Matrix<double,37,1> states, Eigen::Matrix<double,4,1> inputs) {
    double subx_0 = states(7,0);
    double subx_1 = sin(subx_0);
    double subx_2 = pow(subx_1, 2);
    double subx_3 = states(8,0);
    double subx_4 = sin(subx_3);
    double subx_5 = pow(subx_4, 2);
    double subx_6 = states(9,0);
    double subx_7 = sin(subx_6);
    double subx_8 = pow(subx_7, 2);
    double subx_9 = states(10,0);
    double subx_10 = sin(subx_9);
    double subx_11 = pow(subx_10, 2);
    double subx_12 = cos(subx_0);
    double subx_13 = pow(subx_12, 2);
    double subx_14 = cos(subx_3);
    double subx_15 = pow(subx_14, 2);
    double subx_16 = cos(subx_6);
    double subx_17 = pow(subx_16, 2);
    double subx_18 = cos(subx_9);
    double subx_19 = pow(subx_18, 2);
    double subx_20 = states(11,0);
    double subx_21 = cos(subx_20);
    double subx_22 = subx_12*subx_21;
    double subx_23 = states(14,0);
    double subx_24 = cos(subx_23);
    double subx_25 = subx_14*subx_24;
    double subx_26 = states(15,0);
    double subx_27 = cos(subx_26);
    double subx_28 = 0.00122951727112717*subx_16;
    double subx_29 = states(18,0);
    double subx_30 = cos(subx_29);
    double subx_31 = 0.00122951727112717*subx_18;
    double subx_32 = pow(subx_21, 2);
    double subx_33 = 7.0e-7*subx_32;
    double subx_34 = states(12,0);
    double subx_35 = cos(subx_34);
    double subx_36 = pow(subx_35, 2);
    double subx_37 = 7.0e-7*subx_36;
    double subx_38 = states(13,0);
    double subx_39 = cos(subx_38);
    double subx_40 = pow(subx_39, 2);
    double subx_41 = 7.0e-7*subx_5;
    double subx_42 = pow(subx_24, 2);
    double subx_43 = pow(subx_27, 2);
    double subx_44 = 7.0e-7*subx_8;
    double subx_45 = states(16,0);
    double subx_46 = cos(subx_45);
    double subx_47 = pow(subx_46, 2);
    double subx_48 = states(17,0);
    double subx_49 = cos(subx_48);
    double subx_50 = pow(subx_49, 2);
    double subx_51 = 7.0e-7*subx_11;
    double subx_52 = pow(subx_30, 2);
    double subx_53 = sin(subx_20);
    double subx_54 = pow(subx_53, 2);
    double subx_55 = 0.000368725*subx_54;
    double subx_56 = sin(subx_34);
    double subx_57 = pow(subx_56, 2);
    double subx_58 = 0.000368725*subx_57;
    double subx_59 = sin(subx_38);
    double subx_60 = pow(subx_59, 2);
    double subx_61 = 0.000368725*subx_5;
    double subx_62 = sin(subx_23);
    double subx_63 = pow(subx_62, 2);
    double subx_64 = sin(subx_26);
    double subx_65 = pow(subx_64, 2);
    double subx_66 = 0.000368725*subx_8;
    double subx_67 = sin(subx_45);
    double subx_68 = pow(subx_67, 2);
    double subx_69 = sin(subx_48);
    double subx_70 = pow(subx_69, 2);
    double subx_71 = 0.000368725*subx_70;
    double subx_72 = sin(subx_29);
    double subx_73 = pow(subx_72, 2);
    double subx_74 = 0.000368725*subx_73;
    double subx_75 = subx_12*subx_35;
    double subx_76 = subx_14*subx_39;
    double subx_77 = 0.000614758635563584*subx_35;
    double subx_78 = subx_12*subx_77;
    double subx_79 = subx_1*subx_77;
    double subx_80 = 0.000614758635563584*subx_39;
    double subx_81 = subx_14*subx_80;
    double subx_82 = subx_4*subx_80;
    double subx_83 = 0.000614758635563584*subx_21;
    double subx_84 = subx_12*subx_83;
    double subx_85 = -subx_84;
    double subx_86 = subx_1*subx_83;
    double subx_87 = -subx_86;
    double subx_88 = 0.000614758635563584*subx_24;
    double subx_89 = subx_14*subx_88;
    double subx_90 = -subx_89;
    double subx_91 = subx_4*subx_88;
    double subx_92 = -subx_91;
    double subx_93 = subx_1*subx_12;
    double subx_94 = 7.0e-7*subx_14*subx_4;
    double subx_95 = 0.000368725*subx_1*subx_12;
    double subx_96 = 0.000368725*subx_14*subx_4;
    double subx_97 = 7.0e-7*subx_16*subx_7;
    double subx_98 = 7.0e-7*subx_10*subx_18;
    double subx_99 = 0.000368725*subx_16*subx_7;
    double subx_100 = 0.000368725*subx_10*subx_18;
    double subx_101 = 0.000614758635563584*subx_27;
    double subx_102 = subx_101*subx_16;
    double subx_103 = subx_101*subx_7;
    double subx_104 = 0.000614758635563584*subx_30;
    double subx_105 = subx_104*subx_18;
    double subx_106 = subx_10*subx_104;
    double subx_107 = 0.000614758635563584*subx_46;
    double subx_108 = -subx_107*subx_16;
    double subx_109 = -subx_107*subx_7;
    double subx_110 = 0.000614758635563584*subx_49;
    double subx_111 = -subx_110*subx_18;
    double subx_112 = -subx_10*subx_110;
    double subx_113 = subx_102 + subx_103 + subx_105 + subx_106 + subx_108 + subx_109 + subx_111 + subx_112;
    double subx_114 = 0.00073745*subx_10*subx_18 - subx_100*subx_70 - subx_100*subx_73 + subx_113 - 0.00073745*subx_14*subx_4 + 0.00073745*subx_16*subx_7 + subx_33*subx_93 + subx_37*subx_93 + subx_40*subx_94 + subx_42*subx_94 - subx_43*subx_97 - subx_47*subx_97 - subx_50*subx_98 - subx_52*subx_98 + subx_54*subx_95 + subx_57*subx_95 + subx_60*subx_96 + subx_63*subx_96 - subx_65*subx_99 - subx_68*subx_99 + subx_78 + subx_79 + subx_81 + subx_82 + subx_85 + subx_87 + subx_90 + subx_92 - 0.00073745*subx_93 + 4.33680868994202e-19;
    double subx_115 = 0.254558441227157*subx_12;
    double subx_116 = subx_115*subx_53;
    double subx_117 = 0.254558441227157*subx_1;
    double subx_118 = subx_117*subx_53;
    double subx_119 = subx_116 - subx_118;
    double subx_120 = 0.002415*subx_12;
    double subx_121 = 0.254558441227157*subx_16;
    double subx_122 = subx_121*subx_67;
    double subx_123 = 0.254558441227157*subx_7;
    double subx_124 = subx_123*subx_67;
    double subx_125 = subx_122 - subx_124;
    double subx_126 = 0.002415*subx_16;
    double subx_127 = 0.254558441227157*subx_4;
    double subx_128 = subx_127*subx_59;
    double subx_129 = 0.254558441227157*subx_14;
    double subx_130 = subx_129*subx_59;
    double subx_131 = subx_128 - subx_130;
    double subx_132 = 0.002415*subx_14;
    double subx_133 = 0.254558441227157*subx_10;
    double subx_134 = subx_133*subx_72;
    double subx_135 = 0.254558441227157*subx_18;
    double subx_136 = subx_135*subx_72;
    double subx_137 = subx_134 - subx_136;
    double subx_138 = 0.002415*subx_18;
    double subx_139 = subx_129*subx_62;
    double subx_140 = subx_127*subx_62;
    double subx_141 = subx_139 - subx_140;
    double subx_142 = subx_135*subx_69;
    double subx_143 = subx_133*subx_69;
    double subx_144 = subx_142 - subx_143;
    double subx_145 = subx_117*subx_56;
    double subx_146 = subx_115*subx_56;
    double subx_147 = subx_145 - subx_146;
    double subx_148 = subx_123*subx_64;
    double subx_149 = subx_121*subx_64;
    double subx_150 = subx_148 - subx_149;
    double subx_151 = subx_115 + subx_117;
    double subx_152 = 0.002415*subx_1*subx_56;
    double subx_153 = subx_121 + subx_123;
    double subx_154 = 0.002415*subx_64*subx_7;
    double subx_155 = -subx_127 - subx_129;
    double subx_156 = 0.002415*subx_4*subx_62;
    double subx_157 = -subx_133 - subx_135;
    double subx_158 = 0.002415*subx_10*subx_69;
    double subx_159 = subx_127 + subx_129;
    double subx_160 = 0.002415*subx_4*subx_59;
    double subx_161 = subx_133 + subx_135;
    double subx_162 = 0.002415*subx_10*subx_72;
    double subx_163 = -subx_115 - subx_117;
    double subx_164 = 0.002415*subx_1*subx_53;
    double subx_165 = -subx_121 - subx_123;
    double subx_166 = 0.002415*subx_67*subx_7;
    double subx_167 = subx_1*subx_21;
    double subx_168 = 0.000368025*subx_53;
    double subx_169 = subx_167*subx_168;
    double subx_170 = subx_39*subx_4;
    double subx_171 = 0.000368025*subx_170*subx_59;
    double subx_172 = subx_64*subx_7;
    double subx_173 = 0.000368025*subx_27;
    double subx_174 = subx_172*subx_173;
    double subx_175 = subx_10*subx_69;
    double subx_176 = 0.000368025*subx_49;
    double subx_177 = subx_175*subx_176;
    double subx_178 = subx_1*subx_56;
    double subx_179 = 0.000368025*subx_178*subx_35;
    double subx_180 = -subx_179;
    double subx_181 = subx_24*subx_4;
    double subx_182 = 0.000368025*subx_181*subx_62;
    double subx_183 = -subx_182;
    double subx_184 = subx_67*subx_7;
    double subx_185 = 0.000368025*subx_46;
    double subx_186 = -subx_184*subx_185;
    double subx_187 = subx_10*subx_30;
    double subx_188 = -0.000368025*subx_187*subx_72;
    double subx_189 = states(3,0);
    double subx_190 = states(0,0);
    double subx_191 = 2*subx_190;
    double subx_192 = subx_189*subx_191;
    double subx_193 = states(2,0);
    double subx_194 = states(1,0);
    double subx_195 = 2*subx_194;
    double subx_196 = subx_193*subx_195;
    double subx_197 = -subx_192 + subx_196;
    double subx_198 = pow(subx_190, 2);
    double subx_199 = pow(subx_194, 2);
    double subx_200 = pow(subx_193, 2);
    double subx_201 = -subx_200;
    double subx_202 = pow(subx_189, 2);
    double subx_203 = -subx_202;
    double subx_204 = subx_198 + subx_199 + subx_201 + subx_203;
    double subx_205 = subx_16*subx_197 - subx_204*subx_7;
    double subx_206 = subx_205*subx_67;
    double subx_207 = subx_191*subx_193;
    double subx_208 = subx_189*subx_195;
    double subx_209 = subx_207 + subx_208;
    double subx_210 = subx_209*subx_46;
    double subx_211 = subx_206 + subx_210;
    double subx_212 = -subx_10*subx_204 + subx_18*subx_197;
    double subx_213 = subx_212*subx_72;
    double subx_214 = subx_209*subx_30;
    double subx_215 = subx_213 + subx_214;
    double subx_216 = subx_209*subx_21;
    double subx_217 = subx_12*subx_53;
    double subx_218 = subx_1*subx_53;
    double subx_219 = subx_197*subx_217 + subx_204*subx_218 + subx_216;
    double subx_220 = subx_209*subx_39;
    double subx_221 = subx_14*subx_59;
    double subx_222 = subx_197*subx_221;
    double subx_223 = subx_4*subx_59;
    double subx_224 = subx_204*subx_223 + subx_220 + subx_222;
    double subx_225 = subx_209*subx_27;
    double subx_226 = subx_205*subx_64;
    double subx_227 = subx_225 - subx_226;
    double subx_228 = subx_209*subx_49;
    double subx_229 = subx_212*subx_69;
    double subx_230 = subx_228 - subx_229;
    double subx_231 = subx_209*subx_35;
    double subx_232 = subx_12*subx_56;
    double subx_233 = -subx_178*subx_204 - subx_197*subx_232 + subx_231;
    double subx_234 = subx_209*subx_24;
    double subx_235 = subx_14*subx_62;
    double subx_236 = subx_4*subx_62;
    double subx_237 = -subx_197*subx_235 - subx_204*subx_236 + subx_234;
    double subx_238 = subx_1*subx_197;
    double subx_239 = subx_12*subx_204;
    double subx_240 = subx_238 - subx_239;
    double subx_241 = subx_197*subx_4;
    double subx_242 = subx_14*subx_204;
    double subx_243 = subx_241 - subx_242;
    double subx_244 = subx_197*subx_7;
    double subx_245 = subx_16*subx_204;
    double subx_246 = subx_244 + subx_245;
    double subx_247 = subx_10*subx_197;
    double subx_248 = subx_18*subx_204;
    double subx_249 = subx_247 + subx_248;
    double subx_250 = -subx_238 + subx_239;
    double subx_251 = -subx_241 + subx_242;
    double subx_252 = -subx_244 - subx_245;
    double subx_253 = -subx_247 - subx_248;
    double subx_254 = subx_120*subx_219 - subx_120*subx_233 + subx_126*subx_211 - subx_126*subx_227 + subx_132*subx_224 - subx_132*subx_237 + subx_138*subx_215 - subx_138*subx_230 + subx_152*subx_240 + subx_154*subx_246 + subx_156*subx_243 + subx_158*subx_249 - subx_160*subx_251 - subx_162*subx_253 - subx_164*subx_250 - subx_166*subx_252;
    double subx_255 = subx_198 - subx_199;
    double subx_256 = subx_200 + subx_203 + subx_255;
    double subx_257 = subx_192 + subx_196;
    double subx_258 = subx_16*subx_256 - subx_257*subx_7;
    double subx_259 = subx_258*subx_67;
    double subx_260 = subx_191*subx_194;
    double subx_261 = 2*subx_189*subx_193;
    double subx_262 = -subx_260 + subx_261;
    double subx_263 = subx_262*subx_46;
    double subx_264 = subx_259 + subx_263;
    double subx_265 = -subx_10*subx_257 + subx_18*subx_256;
    double subx_266 = subx_265*subx_72;
    double subx_267 = subx_262*subx_30;
    double subx_268 = subx_266 + subx_267;
    double subx_269 = subx_21*subx_262;
    double subx_270 = subx_217*subx_256 + subx_218*subx_257 + subx_269;
    double subx_271 = subx_262*subx_39;
    double subx_272 = subx_221*subx_256;
    double subx_273 = subx_223*subx_257 + subx_271 + subx_272;
    double subx_274 = subx_262*subx_27;
    double subx_275 = subx_258*subx_64;
    double subx_276 = subx_274 - subx_275;
    double subx_277 = subx_262*subx_49;
    double subx_278 = subx_265*subx_69;
    double subx_279 = subx_277 - subx_278;
    double subx_280 = subx_262*subx_35;
    double subx_281 = -subx_178*subx_257 - subx_232*subx_256 + subx_280;
    double subx_282 = subx_24*subx_262;
    double subx_283 = -subx_235*subx_256 - subx_236*subx_257 + subx_282;
    double subx_284 = subx_16*subx_257;
    double subx_285 = subx_256*subx_7;
    double subx_286 = subx_284 + subx_285;
    double subx_287 = subx_18*subx_257;
    double subx_288 = subx_10*subx_256;
    double subx_289 = subx_287 + subx_288;
    double subx_290 = subx_1*subx_256;
    double subx_291 = subx_12*subx_257;
    double subx_292 = subx_290 - subx_291;
    double subx_293 = subx_256*subx_4;
    double subx_294 = subx_14*subx_257;
    double subx_295 = subx_293 - subx_294;
    double subx_296 = -subx_290 + subx_291;
    double subx_297 = -subx_293 + subx_294;
    double subx_298 = -subx_284 - subx_285;
    double subx_299 = -subx_287 - subx_288;
    double subx_300 = subx_120*subx_270 - subx_120*subx_281 + subx_126*subx_264 - subx_126*subx_276 + subx_132*subx_273 - subx_132*subx_283 + subx_138*subx_268 - subx_138*subx_279 + subx_152*subx_292 + subx_154*subx_286 + subx_156*subx_295 + subx_158*subx_289 - subx_160*subx_297 - subx_162*subx_299 - subx_164*subx_296 - subx_166*subx_298;
    double subx_301 = subx_260 + subx_261;
    double subx_302 = -subx_207 + subx_208;
    double subx_303 = subx_16*subx_301 - subx_302*subx_7;
    double subx_304 = subx_303*subx_67;
    double subx_305 = subx_201 + subx_202 + subx_255;
    double subx_306 = subx_305*subx_46;
    double subx_307 = subx_304 + subx_306;
    double subx_308 = -subx_10*subx_302 + subx_18*subx_301;
    double subx_309 = subx_308*subx_72;
    double subx_310 = subx_30*subx_305;
    double subx_311 = subx_309 + subx_310;
    double subx_312 = subx_21*subx_305;
    double subx_313 = subx_1*subx_302;
    double subx_314 = subx_313*subx_53;
    double subx_315 = subx_217*subx_301;
    double subx_316 = subx_312 + subx_314 + subx_315;
    double subx_317 = subx_305*subx_39;
    double subx_318 = subx_223*subx_302;
    double subx_319 = subx_221*subx_301;
    double subx_320 = subx_317 + subx_318 + subx_319;
    double subx_321 = subx_27*subx_305;
    double subx_322 = subx_303*subx_64;
    double subx_323 = subx_321 - subx_322;
    double subx_324 = subx_305*subx_49;
    double subx_325 = subx_308*subx_69;
    double subx_326 = subx_324 - subx_325;
    double subx_327 = subx_305*subx_35;
    double subx_328 = subx_313*subx_56;
    double subx_329 = subx_232*subx_301;
    double subx_330 = subx_327 - subx_328 - subx_329;
    double subx_331 = subx_24*subx_305;
    double subx_332 = subx_236*subx_302;
    double subx_333 = subx_235*subx_301;
    double subx_334 = subx_331 - subx_332 - subx_333;
    double subx_335 = subx_16*subx_302;
    double subx_336 = subx_301*subx_7;
    double subx_337 = subx_335 + subx_336;
    double subx_338 = subx_18*subx_302;
    double subx_339 = subx_10*subx_301;
    double subx_340 = subx_338 + subx_339;
    double subx_341 = subx_1*subx_301;
    double subx_342 = subx_12*subx_302;
    double subx_343 = subx_341 - subx_342;
    double subx_344 = subx_301*subx_4;
    double subx_345 = subx_14*subx_302;
    double subx_346 = subx_344 - subx_345;
    double subx_347 = -subx_341 + subx_342;
    double subx_348 = -subx_344 + subx_345;
    double subx_349 = -subx_335 - subx_336;
    double subx_350 = 0.002415*subx_10;
    double subx_351 = -subx_338 - subx_339;
    double subx_352 = subx_351*subx_72;
    double subx_353 = subx_120*subx_316 - subx_120*subx_330 + subx_126*subx_307 - subx_126*subx_323 + subx_132*subx_320 - subx_132*subx_334 + subx_138*subx_311 - subx_138*subx_326 + subx_152*subx_343 + subx_154*subx_337 + subx_156*subx_346 + subx_158*subx_340 - subx_160*subx_348 - subx_164*subx_347 - subx_166*subx_349 - subx_350*subx_352;
    double subx_354 = -subx_169 + subx_179;
    double subx_355 = -subx_171 + subx_182;
    double subx_356 = subx_174 + subx_186;
    double subx_357 = subx_177 + subx_188;
    double subx_358 = 0.000368725*subx_12;
    double subx_359 = -subx_358 - subx_83;
    double subx_360 = subx_358 - subx_77;
    double subx_361 = 0.000368725*subx_14;
    double subx_362 = -subx_361 + subx_80;
    double subx_363 = subx_361 + subx_88;
    double subx_364 = 0.000368725*subx_16;
    double subx_365 = subx_101 + subx_364;
    double subx_366 = subx_107 - subx_364;
    double subx_367 = 0.000368725*subx_18;
    double subx_368 = -subx_110;
    double subx_369 = subx_367 + subx_368;
    double subx_370 = -subx_104;
    double subx_371 = -subx_367 + subx_370;
    double subx_372 = subx_27*subx_7;
    double subx_373 = 7.0e-7*subx_15;
    double subx_374 = 7.0e-7*subx_17;
    double subx_375 = 7.0e-7*subx_19;
    double subx_376 = 0.000368725*subx_15;
    double subx_377 = 0.000368725*subx_17;
    double subx_378 = subx_1*subx_35;
    double subx_379 = subx_46*subx_7;
    double subx_380 = subx_10*subx_49;
    double subx_381 = 0.002415*subx_4;
    double subx_382 = 0.002415*subx_7;
    double subx_383 = 0.002415*subx_1;
    double subx_384 = 0.002415*subx_12*subx_56;
    double subx_385 = 0.002415*subx_18*subx_72;
    double subx_386 = 0.002415*subx_14*subx_62;
    double subx_387 = 0.002415*subx_16*subx_67;
    double subx_388 = 0.002415*subx_14*subx_59;
    double subx_389 = 0.002415*subx_16*subx_64;
    double subx_390 = 0.002415*subx_12*subx_53;
    double subx_391 = 0.002415*subx_18*subx_69;
    double subx_392 = subx_168*subx_22;
    double subx_393 = 0.000368025*subx_221*subx_39;
    double subx_394 = subx_16*subx_67;
    double subx_395 = subx_185*subx_394;
    double subx_396 = subx_18*subx_72;
    double subx_397 = 0.000368025*subx_30*subx_396;
    double subx_398 = 0.000368025*subx_56*subx_75;
    double subx_399 = -subx_398;
    double subx_400 = 0.000368025*subx_235*subx_24;
    double subx_401 = -subx_400;
    double subx_402 = subx_16*subx_64;
    double subx_403 = -subx_173*subx_402;
    double subx_404 = subx_18*subx_69;
    double subx_405 = -subx_176*subx_404;
    double subx_406 = subx_211*subx_382 + subx_215*subx_350 - subx_219*subx_383 - subx_224*subx_381 - subx_227*subx_382 - subx_230*subx_350 + subx_233*subx_383 + subx_237*subx_381 + subx_240*subx_384 + subx_243*subx_386 - subx_246*subx_389 - subx_249*subx_391 - subx_250*subx_390 - subx_251*subx_388 + subx_252*subx_387 + subx_253*subx_385;
    double subx_407 = subx_264*subx_382 + subx_268*subx_350 - subx_270*subx_383 - subx_273*subx_381 - subx_276*subx_382 - subx_279*subx_350 + subx_281*subx_383 + subx_283*subx_381 - subx_286*subx_389 - subx_289*subx_391 + subx_292*subx_384 + subx_295*subx_386 - subx_296*subx_390 - subx_297*subx_388 + subx_298*subx_387 + subx_299*subx_385;
    double subx_408 = subx_138*subx_352 + subx_307*subx_382 + subx_311*subx_350 - subx_316*subx_383 - subx_320*subx_381 - subx_323*subx_382 - subx_326*subx_350 + subx_330*subx_383 + subx_334*subx_381 - subx_337*subx_389 - subx_340*subx_391 + subx_343*subx_384 + subx_346*subx_386 - subx_347*subx_390 - subx_348*subx_388 + subx_349*subx_387;
    double subx_409 = -subx_392 + subx_398;
    double subx_410 = -subx_393 + subx_400;
    double subx_411 = subx_395 + subx_403;
    double subx_412 = subx_397 + subx_405;
    double subx_413 = 0.000368725*subx_1;
    double subx_414 = subx_413 + subx_83;
    double subx_415 = -subx_413 + subx_77;
    double subx_416 = 0.000368725*subx_4;
    double subx_417 = subx_416 - subx_80;
    double subx_418 = -subx_416 - subx_88;
    double subx_419 = 0.000368725*subx_7;
    double subx_420 = subx_101 + subx_419;
    double subx_421 = subx_107 - subx_419;
    double subx_422 = 0.000368725*subx_10;
    double subx_423 = subx_368 + subx_422;
    double subx_424 = subx_370 - subx_422;
    double subx_425 = subx_17*subx_64;
    double subx_426 = 0.000614758635563584*subx_425;
    double subx_427 = subx_17*subx_67;
    double subx_428 = 0.000614758635563584*subx_427;
    double subx_429 = 0.000614758635563584*subx_8;
    double subx_430 = subx_429*subx_64;
    double subx_431 = subx_429*subx_67;
    double subx_432 = 0.000614758635563584*subx_69;
    double subx_433 = subx_19*subx_432;
    double subx_434 = 0.000614758635563584*subx_72;
    double subx_435 = subx_19*subx_434;
    double subx_436 = subx_11*subx_432;
    double subx_437 = subx_11*subx_434;
    double subx_438 = subx_13*subx_53;
    double subx_439 = subx_13*subx_56;
    double subx_440 = subx_2*subx_53;
    double subx_441 = subx_2*subx_56;
    double subx_442 = 0.000614758635563584*subx_59;
    double subx_443 = 0.000614758635563584*subx_62;
    double subx_444 = -subx_15*subx_442 - subx_15*subx_443 + 0.000614758635563584*subx_438 + 0.000614758635563584*subx_439 + 0.000614758635563584*subx_440 + 0.000614758635563584*subx_441 - subx_442*subx_5 - subx_443*subx_5;
    double subx_445 = 7.0e-7*subx_54;
    double subx_446 = 7.0e-7*subx_57;
    double subx_447 = 7.0e-7*subx_60;
    double subx_448 = 7.0e-7*subx_63;
    double subx_449 = 7.0e-7*subx_65;
    double subx_450 = 7.0e-7*subx_68;
    double subx_451 = 7.0e-7*subx_70;
    double subx_452 = 7.0e-7*subx_73;
    double subx_453 = 0.000368725*subx_32;
    double subx_454 = 0.000368725*subx_36;
    double subx_455 = 0.000368725*subx_40;
    double subx_456 = 0.000368725*subx_42;
    double subx_457 = 0.000368725*subx_43;
    double subx_458 = 0.000368725*subx_47;
    double subx_459 = 0.000368725*subx_50;
    double subx_460 = 0.000368725*subx_52;
    double subx_461 = 0.002415*subx_27;
    double subx_462 = subx_153*subx_461;
    double subx_463 = 0.002415*subx_30;
    double subx_464 = subx_161*subx_463;
    double subx_465 = 0.002415*subx_46;
    double subx_466 = subx_165*subx_465;
    double subx_467 = 0.002415*subx_49;
    double subx_468 = subx_157*subx_467;
    double subx_469 = 0.002415*subx_35;
    double subx_470 = subx_151*subx_469;
    double subx_471 = 0.002415*subx_39;
    double subx_472 = subx_159*subx_471;
    double subx_473 = 0.002415*subx_21;
    double subx_474 = subx_163*subx_473;
    double subx_475 = 0.002415*subx_24;
    double subx_476 = subx_155*subx_475;
    double subx_477 = subx_249*subx_467;
    double subx_478 = subx_253*subx_463;
    double subx_479 = subx_240*subx_469;
    double subx_480 = subx_243*subx_475;
    double subx_481 = subx_250*subx_473;
    double subx_482 = subx_251*subx_471;
    double subx_483 = subx_246*subx_461 + subx_252*subx_465;
    double subx_484 = subx_477 + subx_478 - subx_479 - subx_480 - subx_481 - subx_482 + subx_483;
    double subx_485 = subx_289*subx_467;
    double subx_486 = subx_299*subx_463;
    double subx_487 = subx_296*subx_473;
    double subx_488 = subx_297*subx_471;
    double subx_489 = subx_292*subx_469;
    double subx_490 = subx_295*subx_475;
    double subx_491 = subx_286*subx_461 + subx_298*subx_465;
    double subx_492 = subx_485 + subx_486 - subx_487 - subx_488 - subx_489 - subx_490 + subx_491;
    double subx_493 = subx_340*subx_467;
    double subx_494 = subx_351*subx_463;
    double subx_495 = subx_347*subx_473;
    double subx_496 = subx_348*subx_471;
    double subx_497 = subx_343*subx_469;
    double subx_498 = subx_346*subx_475;
    double subx_499 = subx_337*subx_461 + subx_349*subx_465;
    double subx_500 = subx_493 + subx_494 - subx_495 - subx_496 - subx_497 - subx_498 + subx_499;
    double subx_501 = -subx_445 - subx_446 - subx_453 - subx_454 - 6.3e-5;
    double subx_502 = -subx_447 - subx_448 - subx_455 - subx_456 - 6.3e-5;
    double subx_503 = subx_449 + subx_450 + subx_457 + subx_458 + 6.3e-5;
    double subx_504 = subx_451 + subx_452 + subx_459 + subx_460 + 6.3e-5;
    double subx_505 = -0.000614758635563584*subx_217 + 0.000614758635563584*subx_218;
    double subx_506 = -0.000614758635563584*subx_178 + 0.000614758635563584*subx_232;
    double subx_507 = 0.000614758635563584*subx_221 - subx_4*subx_442;
    double subx_508 = -subx_14*subx_443 + subx_4*subx_443;
    double subx_509 = 0.000614758635563584*subx_16;
    double subx_510 = -0.000614758635563584*subx_172 + subx_509*subx_64;
    double subx_511 = 0.000614758635563584*subx_184 - subx_509*subx_67;
    double subx_512 = subx_10*subx_432 - subx_18*subx_432;
    double subx_513 = subx_10*subx_72;
    double subx_514 = 0.000614758635563584*subx_396 - 0.000614758635563584*subx_513;
    double subx_515 = subx_479 + subx_481;
    double subx_516 = subx_480 + subx_482;
    double subx_517 = subx_477 + subx_478;
    double subx_518 = -subx_164*subx_204 - subx_197*subx_390 - 0.002415*subx_216;
    double subx_519 = subx_152*subx_204 + subx_197*subx_384 - 0.002415*subx_231;
    double subx_520 = -subx_160*subx_204 - 0.002415*subx_220 - 0.002415*subx_222;
    double subx_521 = subx_156*subx_204 + subx_197*subx_386 - 0.002415*subx_234;
    double subx_522 = -0.002415*subx_225 + 0.002415*subx_226;
    double subx_523 = -0.002415*subx_206 - 0.002415*subx_210;
    double subx_524 = -0.002415*subx_228 + 0.002415*subx_229;
    double subx_525 = -0.002415*subx_213 - 0.002415*subx_214;
    double subx_526 = subx_487 + subx_489;
    double subx_527 = subx_488 + subx_490;
    double subx_528 = subx_485 + subx_486;
    double subx_529 = -subx_164*subx_257 - subx_256*subx_390 - 0.002415*subx_269;
    double subx_530 = subx_152*subx_257 + subx_256*subx_384 - 0.002415*subx_280;
    double subx_531 = -subx_160*subx_257 - 0.002415*subx_271 - 0.002415*subx_272;
    double subx_532 = subx_156*subx_257 + subx_256*subx_386 - 0.002415*subx_282;
    double subx_533 = -0.002415*subx_274 + 0.002415*subx_275;
    double subx_534 = -0.002415*subx_259 - 0.002415*subx_263;
    double subx_535 = -0.002415*subx_277 + 0.002415*subx_278;
    double subx_536 = -0.002415*subx_266 - 0.002415*subx_267;
    double subx_537 = subx_495 + subx_497;
    double subx_538 = subx_496 + subx_498;
    double subx_539 = subx_493 + subx_494;
    double subx_540 = -subx_164*subx_302 - subx_301*subx_390 - 0.002415*subx_312;
    double subx_541 = subx_152*subx_302 + subx_301*subx_384 - 0.002415*subx_327;
    double subx_542 = -subx_160*subx_302 - 0.002415*subx_317 - 0.002415*subx_319;
    double subx_543 = subx_156*subx_302 + subx_301*subx_386 - 0.002415*subx_331;
    double subx_544 = -0.002415*subx_321 + 0.002415*subx_322;
    double subx_545 = -0.002415*subx_304 - 0.002415*subx_306;
    double subx_546 = -0.002415*subx_324 + 0.002415*subx_325;
    double subx_547 = -0.002415*subx_309 - 0.002415*subx_310;
    double subx_548 = states(19,0);
    double subx_549 = 0.5*subx_548;
    double subx_550 = states(20,0);
    double subx_551 = 0.5*subx_550;
    double subx_552 = states(21,0);
    double subx_553 = 0.5*subx_552;
    double subx_554 = states(22,0);
    double subx_555 = states(23,0);
    double subx_556 = states(24,0);
    double subx_557 = states(25,0);
    double subx_558 = states(26,0);
    double subx_559 = states(27,0);
    double subx_560 = states(28,0);
    double subx_561 = states(29,0);
    double subx_562 = states(30,0);
    double subx_563 = states(31,0);
    double subx_564 = states(32,0);
    double subx_565 = states(33,0);
    double subx_566 = states(34,0);
    double subx_567 = states(35,0);
    double subx_568 = states(36,0);
    double subx_569 = subx_16*subx_548;
    double subx_570 = subx_550*subx_7;
    double subx_571 = 3.1e-5*subx_569 + 3.1e-5*subx_570;
    double subx_572 = subx_552 + subx_559;
    double subx_573 = 6.3e-5*subx_552;
    double subx_574 = 6.3e-5*subx_559 + subx_573;
    double subx_575 = subx_569 + subx_570;
    double subx_576 = subx_548*subx_552;
    double subx_577 = -subx_548*subx_572 + subx_576;
    double subx_578 = subx_550*subx_552;
    double subx_579 = -subx_578;
    double subx_580 = subx_550*subx_572 + subx_579;
    double subx_581 = 3.1e-5*subx_16*subx_577 + subx_571*subx_572 - subx_574*subx_575 - 3.1e-5*subx_580*subx_7;
    double subx_582 = subx_18*subx_548;
    double subx_583 = subx_10*subx_550;
    double subx_584 = 3.1e-5*subx_582 + 3.1e-5*subx_583;
    double subx_585 = subx_552 + subx_560;
    double subx_586 = 6.3e-5*subx_560 + subx_573;
    double subx_587 = subx_582 + subx_583;
    double subx_588 = -subx_548*subx_585 + subx_576;
    double subx_589 = 3.1e-5*subx_18;
    double subx_590 = subx_550*subx_585 + subx_579;
    double subx_591 = -3.1e-5*subx_10*subx_590 + subx_584*subx_585 - subx_586*subx_587 + subx_588*subx_589;
    double subx_592 = subx_572*subx_67;
    double subx_593 = subx_548*subx_7;
    double subx_594 = subx_46*subx_593;
    double subx_595 = subx_16*subx_550;
    double subx_596 = subx_46*subx_595;
    double subx_597 = subx_592 + subx_594 - subx_596;
    double subx_598 = subx_46*subx_572;
    double subx_599 = subx_595*subx_67;
    double subx_600 = subx_593*subx_67;
    double subx_601 = 9.1e-5*subx_598 + 9.1e-5*subx_599 - 9.1e-5*subx_600;
    double subx_602 = subx_597*subx_601;
    double subx_603 = subx_598 + subx_599 - subx_600;
    double subx_604 = 7.0e-7*subx_592 + 7.0e-7*subx_594 - 7.0e-7*subx_596;
    double subx_605 = subx_603*subx_604;
    double subx_606 = subx_16*subx_580;
    double subx_607 = 9.1e-5*subx_606;
    double subx_608 = subx_577*subx_7;
    double subx_609 = 9.1e-5*subx_608;
    double subx_610 = -subx_607 - subx_609;
    double subx_611 = subx_602 - subx_605 + subx_610;
    double subx_612 = subx_585*subx_72;
    double subx_613 = subx_10*subx_548;
    double subx_614 = subx_30*subx_613;
    double subx_615 = subx_18*subx_550;
    double subx_616 = subx_30*subx_615;
    double subx_617 = subx_612 + subx_614 - subx_616;
    double subx_618 = subx_30*subx_585;
    double subx_619 = subx_615*subx_72;
    double subx_620 = subx_613*subx_72;
    double subx_621 = 9.1e-5*subx_618 + 9.1e-5*subx_619 - 9.1e-5*subx_620;
    double subx_622 = subx_617*subx_621;
    double subx_623 = subx_618 + subx_619 - subx_620;
    double subx_624 = 7.0e-7*subx_612 + 7.0e-7*subx_614 - 7.0e-7*subx_616;
    double subx_625 = subx_623*subx_624;
    double subx_626 = -9.1e-5*subx_550*subx_552;
    double subx_627 = 9.1e-5*subx_550*subx_585 + subx_626;
    double subx_628 = subx_18*subx_627;
    double subx_629 = subx_10*subx_588;
    double subx_630 = 9.1e-5*subx_629;
    double subx_631 = -subx_628 - subx_630;
    double subx_632 = subx_622 - subx_625 + subx_631;
    double subx_633 = subx_552 - subx_557;
    double subx_634 = subx_56*subx_633;
    double subx_635 = subx_12*subx_550;
    double subx_636 = subx_35*subx_635;
    double subx_637 = subx_1*subx_548;
    double subx_638 = subx_35*subx_637;
    double subx_639 = -subx_634 - subx_636 - subx_638;
    double subx_640 = subx_35*subx_633;
    double subx_641 = subx_56*subx_635;
    double subx_642 = subx_56*subx_637;
    double subx_643 = 9.1e-5*subx_640 - 9.1e-5*subx_641 - 9.1e-5*subx_642;
    double subx_644 = subx_640 - subx_641 - subx_642;
    double subx_645 = -7.0e-7*subx_634 - 7.0e-7*subx_636 - 7.0e-7*subx_638;
    double subx_646 = -subx_548*subx_633 + subx_576;
    double subx_647 = subx_1*subx_646;
    double subx_648 = 9.1e-5*subx_647;
    double subx_649 = 9.1e-5*subx_550*subx_633 + subx_626;
    double subx_650 = subx_12*subx_649;
    double subx_651 = subx_639*subx_643 - subx_644*subx_645 + subx_648 - subx_650;
    double subx_652 = subx_552 - subx_558;
    double subx_653 = subx_62*subx_652;
    double subx_654 = subx_14*subx_550;
    double subx_655 = subx_24*subx_654;
    double subx_656 = subx_4*subx_548;
    double subx_657 = subx_24*subx_656;
    double subx_658 = -subx_653 - subx_655 - subx_657;
    double subx_659 = subx_24*subx_652;
    double subx_660 = subx_62*subx_654;
    double subx_661 = subx_62*subx_656;
    double subx_662 = 9.1e-5*subx_659 - 9.1e-5*subx_660 - 9.1e-5*subx_661;
    double subx_663 = subx_659 - subx_660 - subx_661;
    double subx_664 = -7.0e-7*subx_653 - 7.0e-7*subx_655 - 7.0e-7*subx_657;
    double subx_665 = -subx_548*subx_652 + subx_576;
    double subx_666 = subx_4*subx_665;
    double subx_667 = 9.1e-5*subx_666;
    double subx_668 = subx_550*subx_652 + subx_579;
    double subx_669 = subx_14*subx_668;
    double subx_670 = 9.1e-5*subx_669;
    double subx_671 = subx_658*subx_662 - subx_663*subx_664 + subx_667 - subx_670;
    double subx_672 = pow(subx_552, 2);
    double subx_673 = 0.0053457272657703*subx_672;
    double subx_674 = 0.254558441227157*subx_550;
    double subx_675 = 0.254558441227157*subx_548;
    double subx_676 = -subx_675;
    double subx_677 = subx_674 + subx_676;
    double subx_678 = 0.021*subx_548;
    double subx_679 = subx_673 - subx_677*subx_678;
    double subx_680 = 0.115*subx_59;
    double subx_681 = subx_15*subx_680;
    double subx_682 = subx_5*subx_680;
    double subx_683 = 0.115*subx_62;
    double subx_684 = subx_15*subx_683;
    double subx_685 = subx_5*subx_683;
    double subx_686 = -subx_674;
    double subx_687 = subx_676 + subx_686;
    double subx_688 = subx_673 - subx_678*subx_687;
    double subx_689 = 0.115*subx_425;
    double subx_690 = 0.115*subx_8;
    double subx_691 = subx_64*subx_690;
    double subx_692 = 0.115*subx_427;
    double subx_693 = subx_67*subx_690;
    double subx_694 = -subx_673;
    double subx_695 = subx_674 + subx_675;
    double subx_696 = subx_548*subx_695;
    double subx_697 = subx_694 - 0.021*subx_696;
    double subx_698 = 0.115*subx_69;
    double subx_699 = subx_19*subx_698;
    double subx_700 = subx_11*subx_698;
    double subx_701 = 0.115*subx_72;
    double subx_702 = subx_19*subx_701;
    double subx_703 = subx_11*subx_701;
    double subx_704 = subx_675 + subx_686;
    double subx_705 = subx_548*subx_704;
    double subx_706 = subx_694 - 0.021*subx_705;
    double subx_707 = 0.115*subx_438;
    double subx_708 = 0.115*subx_440;
    double subx_709 = 0.115*subx_439;
    double subx_710 = 0.115*subx_441;
    double subx_711 = subx_12*subx_548;
    double subx_712 = subx_1*subx_550;
    double subx_713 = 3.1e-5*subx_711 - 3.1e-5*subx_712;
    double subx_714 = -6.3e-5*subx_557 + subx_573;
    double subx_715 = subx_711 - subx_712;
    double subx_716 = subx_550*subx_633 + subx_579;
    double subx_717 = 3.1e-5*subx_12;
    double subx_718 = 3.1e-5*subx_1*subx_716 + subx_633*subx_713 + subx_646*subx_717 - subx_714*subx_715;
    double subx_719 = subx_14*subx_548;
    double subx_720 = subx_4*subx_550;
    double subx_721 = 3.1e-5*subx_719 - 3.1e-5*subx_720;
    double subx_722 = -6.3e-5*subx_558 + subx_573;
    double subx_723 = subx_719 - subx_720;
    double subx_724 = 3.1e-5*subx_14*subx_665 + 3.1e-5*subx_4*subx_668 + subx_652*subx_721 - subx_722*subx_723;
    double subx_725 = -subx_593 + subx_595;
    double subx_726 = -3.1e-5*subx_593 + 3.1e-5*subx_595;
    double subx_727 = -subx_572*subx_726 + subx_574*subx_725 + 3.1e-5*subx_606 + 3.1e-5*subx_608;
    double subx_728 = -subx_613 + subx_615;
    double subx_729 = -3.1e-5*subx_613 + 3.1e-5*subx_615;
    double subx_730 = -subx_585*subx_729 + subx_586*subx_728 + subx_589*subx_590 + 3.1e-5*subx_629;
    double subx_731 = subx_635 + subx_637;
    double subx_732 = 3.1e-5*subx_635 + 3.1e-5*subx_637;
    double subx_733 = -subx_633*subx_732 - 3.1e-5*subx_647 + subx_714*subx_731 + subx_716*subx_717;
    double subx_734 = subx_654 + subx_656;
    double subx_735 = 3.1e-5*subx_654 + 3.1e-5*subx_656;
    double subx_736 = -subx_652*subx_735 - 3.1e-5*subx_666 + 3.1e-5*subx_669 + subx_722*subx_734;
    double subx_737 = subx_572*subx_64;
    double subx_738 = subx_27*subx_595;
    double subx_739 = subx_27*subx_593;
    double subx_740 = subx_737 + subx_738 - subx_739;
    double subx_741 = subx_27*subx_572;
    double subx_742 = subx_593*subx_64;
    double subx_743 = subx_595*subx_64;
    double subx_744 = 9.1e-5*subx_741 + 9.1e-5*subx_742 - 9.1e-5*subx_743;
    double subx_745 = subx_740*subx_744;
    double subx_746 = subx_741 + subx_742 - subx_743;
    double subx_747 = 7.0e-7*subx_737 + 7.0e-7*subx_738 - 7.0e-7*subx_739;
    double subx_748 = subx_746*subx_747;
    double subx_749 = subx_607 + subx_609;
    double subx_750 = subx_745 - subx_748 + subx_749;
    double subx_751 = subx_585*subx_69;
    double subx_752 = subx_49*subx_615;
    double subx_753 = subx_49*subx_613;
    double subx_754 = subx_751 + subx_752 - subx_753;
    double subx_755 = subx_49*subx_585;
    double subx_756 = subx_613*subx_69;
    double subx_757 = subx_615*subx_69;
    double subx_758 = 9.1e-5*subx_755 + 9.1e-5*subx_756 - 9.1e-5*subx_757;
    double subx_759 = subx_754*subx_758;
    double subx_760 = subx_755 + subx_756 - subx_757;
    double subx_761 = 7.0e-7*subx_751 + 7.0e-7*subx_752 - 7.0e-7*subx_753;
    double subx_762 = subx_760*subx_761;
    double subx_763 = subx_628 + subx_630;
    double subx_764 = subx_759 - subx_762 + subx_763;
    double subx_765 = subx_53*subx_633;
    double subx_766 = subx_21*subx_635;
    double subx_767 = subx_21*subx_637;
    double subx_768 = -subx_765 + subx_766 + subx_767;
    double subx_769 = subx_21*subx_633;
    double subx_770 = subx_53*subx_635;
    double subx_771 = subx_53*subx_637;
    double subx_772 = 9.1e-5*subx_769 + 9.1e-5*subx_770 + 9.1e-5*subx_771;
    double subx_773 = subx_769 + subx_770 + subx_771;
    double subx_774 = -7.0e-7*subx_765 + 7.0e-7*subx_766 + 7.0e-7*subx_767;
    double subx_775 = -subx_648 + subx_650 + subx_768*subx_772 - subx_773*subx_774;
    double subx_776 = subx_59*subx_652;
    double subx_777 = subx_39*subx_654;
    double subx_778 = subx_39*subx_656;
    double subx_779 = -subx_776 + subx_777 + subx_778;
    double subx_780 = subx_39*subx_652;
    double subx_781 = subx_59*subx_654;
    double subx_782 = subx_59*subx_656;
    double subx_783 = 9.1e-5*subx_780 + 9.1e-5*subx_781 + 9.1e-5*subx_782;
    double subx_784 = subx_780 + subx_781 + subx_782;
    double subx_785 = -7.0e-7*subx_776 + 7.0e-7*subx_777 + 7.0e-7*subx_778;
    double subx_786 = -subx_667 + subx_670 + subx_779*subx_783 - subx_784*subx_785;
    double subx_787 = -0.115*subx_769 - 0.115*subx_770 - 0.115*subx_771;
    double subx_788 = -subx_561 + subx_715;
    double subx_789 = -0.115*subx_561 + 0.115*subx_711 - 0.115*subx_712;
    double subx_790 = 0.021*subx_773*subx_787 - 0.021*subx_788*subx_789;
    double subx_791 = 0.254558441227157*subx_53*subx_790;
    double subx_792 = -0.115*subx_640 + 0.115*subx_641 + 0.115*subx_642;
    double subx_793 = -subx_562 - subx_711 + subx_712;
    double subx_794 = 0.002415*subx_1*subx_550 - 0.002415*subx_12*subx_548 - 0.002415*subx_562;
    double subx_795 = 0.021*subx_644*subx_792 - subx_793*subx_794;
    double subx_796 = 0.254558441227157*subx_56*subx_795;
    double subx_797 = -subx_654*subx_680 - 0.115*subx_780 - 0.115*subx_782;
    double subx_798 = subx_779*subx_797;
    double subx_799 = 0.002415*subx_558;
    double subx_800 = subx_654*subx_799;
    double subx_801 = subx_656*subx_799;
    double subx_802 = -0.021*subx_798 - subx_800 - subx_801;
    double subx_803 = 0.254558441227157*subx_39*subx_802;
    double subx_804 = subx_654*subx_683 + subx_656*subx_683 - 0.115*subx_659;
    double subx_805 = subx_658*subx_804;
    double subx_806 = subx_800 + subx_801 - 0.021*subx_805;
    double subx_807 = 0.254558441227157*subx_24*subx_806;
    double subx_808 = 0.1725*subx_712;
    double subx_809 = 0.1725*subx_711;
    double subx_810 = subx_117*subx_552;
    double subx_811 = subx_115*subx_552;
    double subx_812 = subx_233*subx_554 + subx_281*subx_555 + subx_330*subx_556 + subx_35*subx_704 + subx_56*subx_810 - subx_56*subx_811 - 0.1725*subx_562 + subx_808 - subx_809;
    double subx_813 = subx_240*subx_554 + subx_292*subx_555 + subx_343*subx_556 - 0.1725*subx_640 + 0.1725*subx_641 + 0.1725*subx_642 + subx_810 + subx_811;
    double subx_814 = get_blade_thrust(subx_812, subx_813);
    double subx_815 = 0.254558441227157*subx_814;
    double subx_816 = subx_39*subx_815;
    double subx_817 = subx_24*subx_815;
    double subx_818 = 0.20593755*subx_304 + 0.20593755*subx_306;
    double subx_819 = 0.115*subx_16;
    double subx_820 = 0.20593755*subx_309 + 0.20593755*subx_310;
    double subx_821 = 0.115*subx_18;
    double subx_822 = 0.20593755*subx_312 + 0.20593755*subx_314 + 0.20593755*subx_315;
    double subx_823 = 0.115*subx_12;
    double subx_824 = 0.02368281825*subx_317;
    double subx_825 = 0.02368281825*subx_318;
    double subx_826 = 0.02368281825*subx_319;
    double subx_827 = subx_824 + subx_825 + subx_826;
    double subx_828 = 0.115*subx_741 + 0.115*subx_742 - 0.115*subx_743;
    double subx_829 = subx_740*subx_828;
    double subx_830 = subx_548*subx_559*subx_7;
    double subx_831 = 0.002415*subx_830;
    double subx_832 = subx_16*subx_550*subx_559;
    double subx_833 = 0.002415*subx_832;
    double subx_834 = -0.021*subx_829 + subx_831 - subx_833;
    double subx_835 = subx_613*subx_698 - subx_615*subx_698 + 0.115*subx_755;
    double subx_836 = subx_754*subx_835;
    double subx_837 = 0.002415*subx_560;
    double subx_838 = subx_613*subx_837;
    double subx_839 = subx_615*subx_837;
    double subx_840 = -0.021*subx_836 + subx_838 - subx_839;
    double subx_841 = subx_639*subx_792;
    double subx_842 = subx_12*subx_550*subx_557;
    double subx_843 = 0.002415*subx_842;
    double subx_844 = subx_1*subx_548*subx_557;
    double subx_845 = 0.002415*subx_844;
    double subx_846 = -0.021*subx_841 + subx_843 + subx_845;
    double subx_847 = 0.115*subx_14;
    double subx_848 = -subx_563 + subx_723;
    double subx_849 = 0.002415*subx_14*subx_548 - 0.002415*subx_4*subx_550 - 0.002415*subx_563;
    double subx_850 = 0.021*subx_784*subx_797 - subx_848*subx_849;
    double subx_851 = 0.254558441227157*subx_59*subx_850;
    double subx_852 = -subx_564 - subx_719 + subx_720;
    double subx_853 = -0.002415*subx_14*subx_548 + 0.002415*subx_4*subx_550 - 0.002415*subx_564;
    double subx_854 = 0.021*subx_663*subx_804 - subx_852*subx_853;
    double subx_855 = 0.254558441227157*subx_62*subx_854;
    double subx_856 = 0.021*subx_1*subx_21*subx_548 + 0.021*subx_12*subx_21*subx_550 - 0.021*subx_53*subx_633;
    double subx_857 = -subx_787*subx_856 - subx_843 - subx_845;
    double subx_858 = 0.254558441227157*subx_21;
    double subx_859 = subx_857*subx_858;
    double subx_860 = 0.254558441227157*subx_35;
    double subx_861 = subx_846*subx_860;
    double subx_862 = subx_116*subx_552 - subx_118*subx_552 + subx_21*subx_704 + subx_219*subx_554 + subx_270*subx_555 + subx_316*subx_556 - 0.1725*subx_561 - subx_808 + subx_809;
    double subx_863 = subx_250*subx_554 + subx_296*subx_555 + subx_347*subx_556 - 0.1725*subx_769 - 0.1725*subx_770 - 0.1725*subx_771 - subx_810 - subx_811;
    double subx_864 = get_blade_thrust(subx_862, subx_863);
    double subx_865 = subx_858*subx_864;
    double subx_866 = subx_860*subx_864;
    double subx_867 = 0.20593755*subx_321 - 0.20593755*subx_322;
    double subx_868 = 0.20593755*subx_324 - 0.20593755*subx_325;
    double subx_869 = 0.20593755*subx_327 - 0.20593755*subx_328 - 0.20593755*subx_329;
    double subx_870 = 0.02368281825*subx_331;
    double subx_871 = -0.02368281825*subx_14*subx_301*subx_62 - 0.02368281825*subx_302*subx_4*subx_62 + subx_870;
    double subx_872 = 0.115*subx_598 + 0.115*subx_599 - 0.115*subx_600;
    double subx_873 = -0.021*subx_16*subx_46*subx_550 + 0.021*subx_46*subx_548*subx_7 + 0.021*subx_572*subx_67;
    double subx_874 = -subx_831 + subx_833 - subx_872*subx_873;
    double subx_875 = -subx_613*subx_701 + 0.115*subx_618 + 0.115*subx_619;
    double subx_876 = subx_617*subx_875;
    double subx_877 = -subx_838 + subx_839 - 0.021*subx_876;
    double subx_878 = 9.1e-5*subx_562;
    double subx_879 = 9.1e-5*subx_712;
    double subx_880 = 9.1e-5*subx_711;
    double subx_881 = -subx_878 + subx_879 - subx_880;
    double subx_882 = 9.1e-5*subx_548*subx_552;
    double subx_883 = -9.1e-5*subx_548*subx_633 + subx_882;
    double subx_884 = -subx_178*subx_649 - subx_232*subx_883 + subx_639*subx_878 - subx_639*subx_881 + subx_645*subx_793;
    double subx_885 = 9.1e-5*subx_564;
    double subx_886 = 9.1e-5*subx_720;
    double subx_887 = 9.1e-5*subx_719;
    double subx_888 = -subx_885 + subx_886 - subx_887;
    double subx_889 = 9.1e-5*subx_550*subx_652 + subx_626;
    double subx_890 = -9.1e-5*subx_548*subx_652 + subx_882;
    double subx_891 = -subx_235*subx_890 - subx_236*subx_889 + subx_658*subx_885 - subx_658*subx_888 + subx_664*subx_852;
    double subx_892 = subx_62*subx_891;
    double subx_893 = 9.1e-5*subx_565;
    double subx_894 = 9.1e-5*subx_569;
    double subx_895 = 9.1e-5*subx_570;
    double subx_896 = subx_893 + subx_894 + subx_895;
    double subx_897 = subx_565 + subx_575;
    double subx_898 = 7.0e-7*subx_16*subx_577;
    double subx_899 = -7.0e-7*subx_550*subx_552;
    double subx_900 = 7.0e-7*subx_550*subx_572 + subx_899;
    double subx_901 = subx_27*subx_898 - subx_372*subx_900 + 7.0e-7*subx_565*subx_746 - subx_744*subx_897 + subx_746*subx_896;
    double subx_902 = 9.1e-5*subx_567;
    double subx_903 = 9.1e-5*subx_582;
    double subx_904 = 9.1e-5*subx_583;
    double subx_905 = subx_902 + subx_903 + subx_904;
    double subx_906 = subx_567 + subx_587;
    double subx_907 = subx_18*subx_49;
    double subx_908 = 7.0e-7*subx_548*subx_552;
    double subx_909 = -7.0e-7*subx_548*subx_585 + subx_908;
    double subx_910 = 7.0e-7*subx_550*subx_585 + subx_899;
    double subx_911 = -subx_380*subx_910 + 7.0e-7*subx_567*subx_760 - subx_758*subx_906 + subx_760*subx_905 + subx_907*subx_909;
    double subx_912 = 7.0e-7*subx_550*subx_633 + subx_899;
    double subx_913 = -7.0e-7*subx_548*subx_633 + subx_908;
    double subx_914 = -subx_378*subx_912 - 7.0e-7*subx_562*subx_644 - subx_643*subx_793 + subx_644*subx_881 - subx_75*subx_913;
    double subx_915 = subx_35*subx_914;
    double subx_916 = 7.0e-7*subx_550*subx_652 + subx_899;
    double subx_917 = -7.0e-7*subx_548*subx_652 + subx_908;
    double subx_918 = -subx_181*subx_916 - subx_25*subx_917 - 7.0e-7*subx_564*subx_663 - subx_662*subx_852 + subx_663*subx_888;
    double subx_919 = subx_566 - subx_569 - subx_570;
    double subx_920 = 9.1e-5*subx_566;
    double subx_921 = -subx_894 - subx_895 + subx_920;
    double subx_922 = -9.1e-5*subx_548*subx_572 + subx_882;
    double subx_923 = 9.1e-5*subx_550*subx_572 + subx_626;
    double subx_924 = -subx_184*subx_923 + subx_394*subx_922 - subx_597*subx_920 - subx_597*subx_921 + subx_604*subx_919;
    double subx_925 = subx_568 - subx_582 - subx_583;
    double subx_926 = 9.1e-5*subx_568;
    double subx_927 = -subx_903 - subx_904 + subx_926;
    double subx_928 = -9.1e-5*subx_548*subx_585 + subx_882;
    double subx_929 = subx_396*subx_928 - subx_513*subx_627 - subx_617*subx_926 - subx_617*subx_927 + subx_624*subx_925;
    double subx_930 = get_blade_torque(subx_862, subx_863);
    double subx_931 = get_blade_torque(subx_812, subx_813);
    double subx_932 = 0.1725*subx_719;
    double subx_933 = 0.1725*subx_720;
    double subx_934 = subx_128*subx_552 - subx_130*subx_552 + subx_224*subx_554 + subx_273*subx_555 + subx_320*subx_556 + subx_39*subx_677 - 0.1725*subx_563 + subx_932 - subx_933;
    double subx_935 = subx_129*subx_552;
    double subx_936 = subx_127*subx_552;
    double subx_937 = subx_251*subx_554 + subx_297*subx_555 + subx_348*subx_556 - 0.1725*subx_780 - 0.1725*subx_781 - 0.1725*subx_782 + subx_935 + subx_936;
    double subx_938 = get_blade_torque(subx_934, subx_937);
    double subx_939 = subx_139*subx_552 - subx_140*subx_552 + subx_237*subx_554 + subx_24*subx_677 + subx_283*subx_555 + subx_334*subx_556 - 0.1725*subx_564 - subx_932 + subx_933;
    double subx_940 = subx_243*subx_554 + subx_295*subx_555 + subx_346*subx_556 - 0.1725*subx_659 + 0.1725*subx_660 + 0.1725*subx_661 - subx_935 - subx_936;
    double subx_941 = get_blade_torque(subx_939, subx_940);
    double subx_942 = 9.1e-5*subx_561;
    double subx_943 = -subx_879 + subx_880 - subx_942;
    double subx_944 = subx_217*subx_883 + subx_218*subx_649 + subx_768*subx_942 - subx_768*subx_943 + subx_774*subx_788;
    double subx_945 = subx_53*subx_944;
    double subx_946 = 9.1e-5*subx_563;
    double subx_947 = -subx_886 + subx_887 - subx_946;
    double subx_948 = subx_221*subx_890 + subx_223*subx_889 + subx_779*subx_946 - subx_779*subx_947 + subx_785*subx_848;
    double subx_949 = subx_379*subx_900 - subx_46*subx_898 + 7.0e-7*subx_566*subx_603 - subx_601*subx_919 + subx_603*subx_921;
    double subx_950 = subx_46*subx_949;
    double subx_951 = subx_18*subx_30;
    double subx_952 = subx_187*subx_910 + 7.0e-7*subx_568*subx_623 - subx_621*subx_925 + subx_623*subx_927 - subx_909*subx_951;
    double subx_953 = subx_167*subx_912 + subx_22*subx_913 - 7.0e-7*subx_561*subx_773 - subx_772*subx_788 + subx_773*subx_943;
    double subx_954 = subx_170*subx_916 - 7.0e-7*subx_563*subx_784 + subx_76*subx_917 - subx_783*subx_848 + subx_784*subx_947;
    double subx_955 = subx_172*subx_923 - subx_402*subx_922 - subx_740*subx_893 - subx_740*subx_896 + subx_747*subx_897;
    double subx_956 = subx_175*subx_627 - subx_404*subx_928 - subx_754*subx_902 - subx_754*subx_905 + subx_761*subx_906;
    double subx_957 = 0.0053457272657703*subx_576;
    double subx_958 = 0.0053457272657703*subx_578;
    double subx_959 = subx_957 + subx_958;
    double subx_960 = 0.115*subx_12*subx_35;
    double subx_961 = -subx_958;
    double subx_962 = subx_957 + subx_961;
    double subx_963 = 0.115*subx_16*subx_962;
    double subx_964 = -subx_957;
    double subx_965 = subx_958 + subx_964;
    double subx_966 = 0.115*subx_18*subx_49;
    double subx_967 = 0.20593755*subx_335;
    double subx_968 = 0.20593755*subx_336;
    double subx_969 = subx_967 + subx_968;
    double subx_970 = 0.115*subx_64*subx_7;
    double subx_971 = 0.20593755*subx_338;
    double subx_972 = 0.20593755*subx_339;
    double subx_973 = subx_971 + subx_972;
    double subx_974 = 0.115*subx_10*subx_69;
    double subx_975 = 0.20593755*subx_341;
    double subx_976 = 0.20593755*subx_342;
    double subx_977 = subx_975 - subx_976;
    double subx_978 = 0.115*subx_1*subx_56;
    double subx_979 = 0.20593755*subx_344;
    double subx_980 = 0.20593755*subx_345;
    double subx_981 = subx_979 - subx_980;
    double subx_982 = 0.115*subx_4*subx_62;
    double subx_983 = subx_961 + subx_964;
    double subx_984 = 0.115*subx_24;
    double subx_985 = subx_983*subx_984;
    double subx_986 = 0.002415*subx_53*subx_557;
    double subx_987 = 0.002415*subx_21*subx_561;
    double subx_988 = 0.002415*subx_561*subx_765 - subx_635*subx_987 - subx_637*subx_987 - subx_711*subx_986 + subx_712*subx_986 + subx_789*subx_856;
    double subx_989 = 0.115*subx_1*subx_53;
    double subx_990 = -0.000277725*subx_14*subx_39*subx_550*subx_563 - 0.000277725*subx_14*subx_548*subx_558*subx_59 - 0.000277725*subx_39*subx_4*subx_548*subx_563 + 0.000277725*subx_4*subx_550*subx_558*subx_59 + 0.000277725*subx_563*subx_59*subx_652 + 0.002415*subx_779*(-0.115*subx_563 + 0.115*subx_719 - 0.115*subx_720);
    double subx_991 = -0.115*subx_566 + 0.115*subx_569 + 0.115*subx_570;
    double subx_992 = 0.002415*subx_566;
    double subx_993 = 0.002415*subx_559*subx_67;
    double subx_994 = subx_16*subx_465*subx_550*subx_566 - subx_569*subx_993 - subx_570*subx_993 - subx_592*subx_992 - subx_594*subx_992 + subx_873*subx_991;
    double subx_995 = 0.115*subx_67*subx_7;
    double subx_996 = 0.002415*subx_10*subx_550 + 0.002415*subx_18*subx_548 - 0.002415*subx_568;
    double subx_997 = 0.002415*subx_568;
    double subx_998 = 0.002415*subx_18*subx_548*subx_560;
    double subx_999 = 0.002415*subx_10*subx_550*subx_560;
    double subx_1000 = subx_18*subx_463*subx_550*subx_568 - subx_612*subx_997 - subx_614*subx_997 + subx_617*subx_996 - subx_72*subx_998 - subx_72*subx_999;
    double subx_1001 = 0.115*subx_10*subx_72;
    double subx_1002 = 0.115*subx_21;
    double subx_1003 = subx_1002*subx_959;
    double subx_1004 = subx_30*subx_965;
    double subx_1005 = -subx_975 + subx_976;
    double subx_1006 = -subx_979 + subx_980;
    double subx_1007 = 0.115*subx_4*subx_59;
    double subx_1008 = 0.115*subx_14*subx_39;
    double subx_1009 = -subx_967 - subx_968;
    double subx_1010 = -subx_971 - subx_972;
    double subx_1011 = 0.002415*subx_562;
    double subx_1012 = 0.002415*subx_557*subx_56;
    double subx_1013 = subx_1*subx_469*subx_548*subx_562 + subx_1011*subx_634 + subx_1011*subx_636 + subx_1012*subx_711 - subx_1012*subx_712 + subx_639*subx_794;
    double subx_1014 = 0.002415*subx_24*subx_564;
    double subx_1015 = 0.002415*subx_14*subx_548*subx_558;
    double subx_1016 = 0.002415*subx_4*subx_550*subx_558;
    double subx_1017 = subx_1014*subx_654 + subx_1014*subx_656 + subx_1015*subx_62 - subx_1016*subx_62 + 0.002415*subx_564*subx_653 + subx_658*subx_853;
    double subx_1018 = -0.002415*subx_16*subx_548 - 0.002415*subx_550*subx_7 - 0.002415*subx_565;
    double subx_1019 = 0.002415*subx_565;
    double subx_1020 = 0.002415*subx_559*subx_64;
    double subx_1021 = subx_1018*subx_740 - subx_1019*subx_737 - subx_1019*subx_738 + subx_1019*subx_739 + subx_1020*subx_569 + subx_1020*subx_570;
    double subx_1022 = -0.002415*subx_10*subx_550 - 0.002415*subx_18*subx_548 - 0.002415*subx_567;
    double subx_1023 = 0.002415*subx_49*subx_567;
    double subx_1024 = subx_1022*subx_754 + subx_1023*subx_613 - subx_1023*subx_615 - 0.002415*subx_567*subx_751 + subx_69*subx_998 + subx_69*subx_999;
    double subx_1025 = -subx_1018*subx_897 + 0.021*subx_746*subx_828;
    double subx_1026 = 0.021*subx_603*subx_872 - 0.021*subx_919*subx_991;
    double subx_1027 = get_blade_thrust(subx_934, subx_937);
    double subx_1028 = 0.254558441227157*subx_1027;
    double subx_1029 = -subx_1022*subx_906 + 0.021*subx_760*subx_835;
    double subx_1030 = 0.021*subx_623*subx_875 - subx_925*subx_996;
    double subx_1031 = 0.254558441227157*subx_49;
    double subx_1032 = 0.254558441227157*subx_30;
    double subx_1033 = get_blade_thrust(subx_939, subx_940);
    double subx_1034 = 0.254558441227157*subx_1025*subx_64 + 0.254558441227157*subx_1026*subx_67 + subx_1028*subx_27 + subx_1028*subx_46 - 0.254558441227157*subx_1029*subx_69 - 0.254558441227157*subx_1030*subx_72 - subx_1031*subx_1033 - subx_1031*subx_840 - subx_1032*subx_1033 - subx_1032*subx_877 + 0.254558441227157*subx_27*subx_834 + 0.254558441227157*subx_46*subx_874;
    double subx_1035 = subx_550*subx_695;
    double subx_1036 = 0.021*subx_1035 + subx_673;
    double subx_1037 = subx_550*subx_677;
    double subx_1038 = 0.021*subx_1037 + subx_673;
    double subx_1039 = subx_550*subx_704;
    double subx_1040 = 0.021*subx_1039 + subx_694;
    double subx_1041 = 0.021*subx_550*subx_687 + subx_694;
    double subx_1042 = 0.115*subx_7;
    double subx_1043 = 0.115*subx_10;
    double subx_1044 = 0.115*subx_1;
    double subx_1045 = 0.115*subx_4;
    double subx_1046 = 0.115*subx_1*subx_21;
    double subx_1047 = 0.115*subx_27*subx_7;
    double subx_1048 = 0.115*subx_49;
    double subx_1049 = subx_1048*subx_965;
    double subx_1050 = 0.115*subx_12*subx_56;
    double subx_1051 = 0.115*subx_14*subx_62;
    double subx_1052 = 0.115*subx_39*subx_4;
    double subx_1053 = 0.115*subx_16*subx_67;
    double subx_1054 = 0.115*subx_18*subx_72;
    double subx_1055 = 0.115*subx_12*subx_53;
    double subx_1056 = 0.115*subx_16*subx_64;
    double subx_1057 = 0.115*subx_18*subx_69;
    double subx_1058 = 0.115*subx_1*subx_35;
    double subx_1059 = 0.115*subx_46;
    double subx_1060 = subx_1059*subx_962;
    double subx_1061 = 0.115*subx_14*subx_59;
    double subx_1062 = 0.115*subx_24*subx_4;
    double subx_1063 = subx_713*subx_731;
    double subx_1064 = subx_721*subx_734;
    double subx_1065 = subx_571*subx_725;
    double subx_1066 = subx_53*subx_953;
    double subx_1067 = subx_56*subx_914;
    double subx_1068 = subx_59*subx_954;
    double subx_1069 = subx_62*subx_918;
    double subx_1070 = subx_27*subx_938;
    double subx_1071 = subx_46*subx_938;
    double subx_1072 = 0.002415*subx_39*subx_563;
    double subx_1073 = -subx_1015*subx_59 + subx_1016*subx_59 - subx_1072*subx_654 - subx_1072*subx_656 + 0.002415*subx_563*subx_776 + subx_779*subx_849;
    double subx_1074 = subx_715*subx_732;
    double subx_1075 = subx_723*subx_735;
    double subx_1076 = -subx_575*subx_726;
    double subx_1077 = subx_21*subx_944;
    double subx_1078 = subx_35*subx_884;
    double subx_1079 = subx_39*subx_948;
    double subx_1080 = subx_24*subx_891;
    double subx_1081 = -subx_64*subx_901;
    double subx_1082 = -subx_67*subx_949;
    double subx_1083 = -subx_27*subx_955;
    double subx_1084 = -subx_46*subx_924;
    double subx_1085 = subx_21*subx_930;
    double subx_1086 = subx_35*subx_930;
    double subx_1087 = subx_39*subx_931;
    double subx_1088 = subx_24*subx_931;
    double subx_1089 = 0.115*subx_27;
    double subx_1090 = subx_1089*subx_969;
    double subx_1091 = subx_1009*subx_1059;
    double subx_1092 = subx_1002*subx_988;
    double subx_1093 = 0.115*subx_35;
    double subx_1094 = subx_1013*subx_1093;
    double subx_1095 = 0.115*subx_39;
    double subx_1096 = subx_1073*subx_1095;
    double subx_1097 = subx_1017*subx_984;
    double subx_1098 = -0.0075816*subx_548 - 0.0075816*subx_550;
    double subx_1099 = subx_1002*subx_1005;
    double subx_1100 = subx_1006*subx_1095;
    double subx_1101 = subx_1093*subx_977;
    double subx_1102 = subx_981*subx_984;
    double subx_1103 = -subx_1021*subx_1089;
    double subx_1104 = -subx_1059*subx_994;
    double subx_1105 = subx_548*subx_677;
    double subx_1106 = subx_1008*subx_1038;
    double subx_1107 = subx_1062*subx_679;
    double subx_1108 = subx_1059*subx_688*subx_7;
    double subx_1109 = subx_1002*subx_1040*subx_12;
    double subx_1110 = 0.115*subx_1041*subx_16;
    double subx_1111 = subx_1110*subx_46;
    double subx_1112 = subx_1058*subx_706;
    double subx_1113 = subx_1038*subx_14*subx_984;
    double subx_1114 = subx_1052*subx_679;
    double subx_1115 = -subx_1047*subx_688;
    double subx_1116 = subx_1040*subx_960;
    double subx_1117 = -subx_1110*subx_27;
    double subx_1118 = subx_1046*subx_706;
    double subx_1119 = 0.115*subx_30;
    double subx_1120 = -subx_10*subx_1048*subx_697 - subx_1000*subx_1119 + subx_1010*subx_1119 - subx_1024*subx_1048 + subx_1036*subx_30*subx_821 - subx_1036*subx_966 + subx_1043*subx_30*subx_697 + subx_1048*subx_973 - subx_30*subx_929 + subx_30*subx_941 + subx_49*subx_941 - subx_49*subx_956 + subx_584*subx_728 - subx_587*subx_729 - subx_69*subx_911 - subx_72*subx_952;
    double subx_1121 = 0.0190918830920368*subx_672;
    double subx_1122 = 0.075*subx_1035 + subx_1121;
    double subx_1123 = 0.075*subx_1037 + subx_1121;
    double subx_1124 = -0.075*subx_1105 + subx_1121;
    double subx_1125 = -0.0190918830920368*subx_548 - 0.0190918830920368*subx_550;
    double subx_1126 = subx_1121 - subx_1125*subx_548;
    double subx_1127 = -subx_1121;
    double subx_1128 = 0.075*subx_1039 + subx_1127;
    double subx_1129 = subx_1125*subx_550 + subx_1127;
    double subx_1130 = subx_1127 - 0.075*subx_696;
    double subx_1131 = subx_1127 - 0.075*subx_705;
    double subx_1132 = 0.0190918830920368*subx_576;
    double subx_1133 = 0.0190918830920368*subx_578;
    double subx_1134 = subx_1132 + subx_1133;
    double subx_1135 = -subx_1133;
    double subx_1136 = subx_1132 + subx_1135;
    double subx_1137 = -subx_1132;
    double subx_1138 = subx_1133 + subx_1137;
    double subx_1139 = subx_1135 + subx_1137;
    double subx_1140 = 0.0106914545315406*subx_672;
    double subx_1141 = subx_1140 + 0.042*subx_550*subx_695;
    double subx_1142 = subx_1140 + 0.042*subx_550*subx_677;
    double subx_1143 = 4*subx_193*subx_194;
    double subx_1144 = subx_1143 - 4*subx_189*subx_190;
    double subx_1145 = -0.0106914545315406*subx_672;
    double subx_1146 = subx_1145 + 0.042*subx_550*subx_704;
    double subx_1147 = subx_1145 + 0.042*subx_550*subx_687;
    double subx_1148 = 4*subx_189*subx_194 + 4*subx_190*subx_193;
    double subx_1149 = subx_1143 + 4*subx_189*subx_190;
    double subx_1150 = -2*subx_199;
    double subx_1151 = 2*subx_198;
    double subx_1152 = subx_1150 + subx_1151 + 2*subx_200 - 2*subx_202;
    double subx_1153 = 4*subx_189*subx_193;
    double subx_1154 = subx_1153 - 4*subx_190*subx_194;
    double subx_1155 = subx_1153 + 4*subx_190*subx_194;
    double subx_1156 = subx_1150 + subx_1151 - 2*subx_200 + 2*subx_202;
    double subx_1157 = 0.138*sqrt(3);
    double subx_1158 = 0.1725*subx_864;
    double subx_1159 = 0.000277725*subx_842;
    double subx_1160 = 0.000277725*subx_844;
    double subx_1161 = 0.1725*subx_814;
    double subx_1162 = 0.000277725*subx_558;
    double subx_1163 = subx_1162*subx_654;
    double subx_1164 = subx_1162*subx_656;
    double subx_1165 = 0.1725*subx_1027;
    double subx_1166 = 0.000277725*subx_830;
    double subx_1167 = 0.000277725*subx_832;
    double subx_1168 = 0.1725*subx_1033;
    double subx_1169 = 0.000277725*subx_560;
    double subx_1170 = subx_1169*subx_613;
    double subx_1171 = subx_1169*subx_615;

    Eigen::Matrix<double,37,1> ret;
    ret(0,0) = -subx_189*subx_553 - subx_193*subx_551 - subx_194*subx_549;
    ret(1,0) = -subx_189*subx_551 + subx_190*subx_549 + subx_193*subx_553;
    ret(2,0) = subx_189*subx_549 + subx_190*subx_551 - subx_194*subx_553;
    ret(3,0) = subx_190*subx_553 - subx_193*subx_549 + subx_194*subx_551;
    ret(4,0) = subx_554;
    ret(5,0) = subx_555;
    ret(6,0) = subx_556;
    ret(7,0) = subx_557;
    ret(8,0) = subx_558;
    ret(9,0) = subx_559;
    ret(10,0) = subx_560;
    ret(11,0) = subx_561;
    ret(12,0) = subx_562;
    ret(13,0) = subx_563;
    ret(14,0) = subx_564;
    ret(15,0) = subx_565;
    ret(16,0) = subx_566;
    ret(17,0) = subx_567;
    ret(18,0) = subx_568;
    ret(19,0) = -subx_1*subx_718 + subx_1*subx_915 - subx_1*subx_945 + subx_10*subx_591 + subx_1000*subx_1001 - subx_1001*subx_1010 - subx_1003*subx_12 - subx_1004*subx_821 - subx_1005*subx_989 - subx_1006*subx_1007 - subx_1008*subx_983 - subx_1009*subx_995 - subx_1013*subx_978 - subx_1017*subx_982 - subx_1021*subx_970 - subx_1024*subx_974 + subx_1034 + subx_12*subx_651 - subx_12*subx_733 - subx_12*subx_775 + subx_14*subx_671 - subx_14*subx_736 - subx_14*subx_786 + subx_14*subx_827 - subx_14*subx_871 + subx_14*subx_985 + subx_16*subx_611 - subx_16*subx_727 - subx_16*subx_750 - subx_167*subx_953 - subx_170*subx_954 + subx_172*subx_938 - subx_172*subx_955 + subx_175*subx_941 - subx_175*subx_956 + subx_178*subx_884 + subx_178*subx_930 + subx_18*subx_632 - subx_18*subx_730 - subx_18*subx_764 + subx_181*subx_918 + subx_184*subx_924 - subx_184*subx_938 - subx_187*subx_952 - subx_218*subx_930 - subx_223*subx_931 - subx_223*subx_948 + subx_223*subx_990 + subx_236*subx_931 + subx_27*subx_963 + subx_372*subx_901 + subx_380*subx_911 - subx_4*subx_724 + subx_4*subx_892 - subx_46*subx_963 + subx_513*subx_929 - subx_513*subx_941 + 4.33680868994202e-19*subx_576 - 0.0603264*subx_578 + subx_581*subx_7 - subx_679*(subx_681 + subx_682) - subx_679*(subx_684 + subx_685) - subx_688*(subx_689 + subx_691) - subx_688*(subx_692 + subx_693) - subx_697*(subx_699 + subx_700) - subx_697*(subx_702 + subx_703) - subx_7*subx_950 - subx_706*(subx_707 + subx_708) - subx_706*(subx_709 + subx_710) + subx_791 + subx_796 - subx_802*subx_847 + subx_803 + subx_806*subx_847 + subx_807 + subx_816 + subx_817 + subx_818*subx_819 + subx_819*subx_834 - subx_819*subx_867 - subx_819*subx_874 + subx_820*subx_821 + subx_821*subx_840 - subx_821*subx_868 - subx_821*subx_877 + subx_822*subx_823 + subx_823*subx_846 - subx_823*subx_857 - subx_823*subx_869 - subx_851 - subx_855 - subx_859 - subx_861 - subx_865 - subx_866 + subx_959*subx_960 + subx_965*subx_966 + subx_969*subx_970 + subx_973*subx_974 + subx_977*subx_978 + subx_981*subx_982 + subx_988*subx_989 + subx_994*subx_995;
    ret(20,0) = -subx_1*subx_651 + subx_1*subx_733 + subx_1*subx_775 + subx_10*subx_1049 + subx_10*subx_632 - subx_10*subx_730 - subx_10*subx_764 - subx_1000*subx_1054 - subx_1004*subx_1043 - subx_1005*subx_1055 - subx_1006*subx_1061 + subx_1009*subx_1053 + subx_1010*subx_1054 - subx_1013*subx_1050 - subx_1017*subx_1051 + subx_1021*subx_1056 + subx_1024*subx_1057 + subx_1034 - subx_1036*(-subx_699 - subx_700) - subx_1036*(-subx_702 - subx_703) - subx_1038*(-subx_681 - subx_682) - subx_1038*(-subx_684 - subx_685) - subx_1040*(-subx_707 - subx_708) - subx_1040*(-subx_709 - subx_710) - subx_1041*(-subx_689 - subx_691) - subx_1041*(-subx_692 - subx_693) + subx_1042*subx_818 + subx_1042*subx_834 - subx_1042*subx_867 - subx_1042*subx_874 + subx_1043*subx_820 + subx_1043*subx_840 - subx_1043*subx_868 - subx_1043*subx_877 - subx_1044*subx_822 - subx_1044*subx_846 + subx_1044*subx_857 + subx_1044*subx_869 + subx_1045*subx_802 - subx_1045*subx_806 + subx_1046*subx_959 + subx_1047*subx_962 + subx_1050*subx_977 + subx_1051*subx_981 + subx_1052*subx_983 - subx_1053*subx_994 + subx_1055*subx_988 - subx_1056*subx_969 - subx_1057*subx_973 - subx_1058*subx_959 - subx_1060*subx_7 - subx_1062*subx_983 - subx_12*subx_718 + subx_12*subx_915 - subx_12*subx_945 - subx_14*subx_724 + subx_14*subx_892 - subx_16*subx_27*subx_901 - subx_16*subx_581 + subx_16*subx_950 - subx_18*subx_591 - subx_217*subx_930 - subx_22*subx_953 - subx_221*subx_931 - subx_221*subx_948 + subx_221*subx_990 + subx_232*subx_884 + subx_232*subx_930 + subx_235*subx_931 + subx_25*subx_918 - subx_394*subx_924 + subx_394*subx_938 - subx_396*subx_929 + subx_396*subx_941 - subx_4*subx_671 + subx_4*subx_736 + subx_4*subx_786 - subx_4*subx_827 + subx_4*subx_871 - subx_402*subx_938 + subx_402*subx_955 - subx_404*subx_941 + subx_404*subx_956 + 0.0803264*subx_576 - 4.33680868994202e-19*subx_578 + subx_611*subx_7 - subx_7*subx_727 - subx_7*subx_750 - subx_76*subx_954 - subx_791 - subx_796 - subx_803 - subx_807 - subx_816 - subx_817 + subx_851 + subx_855 + subx_859 + subx_861 + subx_865 + subx_866 - subx_907*subx_911 + subx_951*subx_952;
    ret(21,0) = -subx_1000*subx_161 - subx_1013*subx_151 - subx_1017*subx_155 - subx_1021*subx_153 - subx_1024*subx_157 - subx_1025*(subx_121*subx_27 - subx_123*subx_27) - subx_1026*(-subx_121*subx_46 + subx_123*subx_46) - subx_1027*subx_122 + subx_1027*subx_124 - subx_1027*subx_148 + subx_1027*subx_149 - subx_1029*(subx_133*subx_49 - subx_135*subx_49) - subx_1030*(-subx_133*subx_30 + subx_135*subx_30) - subx_1033*subx_134 + subx_1033*subx_136 - subx_1033*subx_142 + subx_1033*subx_143 + 0.0297833376235774*subx_1035 - 0.0297833376235774*subx_1037 + 0.0297833376235774*subx_1039 + subx_1063 + subx_1064 + subx_1065 + subx_1066 + subx_1067 + subx_1068 + subx_1069 + subx_1070 + subx_1071 - subx_1073*subx_159 - subx_1074 - subx_1075 + subx_1076 - subx_1077 - subx_1078 - subx_1079 - subx_1080 + subx_1081 + subx_1082 + subx_1083 + subx_1084 - subx_1085 - subx_1086 - subx_1087 - subx_1088 + subx_1090 + subx_1091 + subx_1092 + subx_1094 + subx_1096 + subx_1097 + subx_1098*subx_548 - subx_1098*subx_550 - subx_1099 - subx_1100 - subx_1101 - subx_1102 + subx_1103 + subx_1104 - 0.0297833376235774*subx_1105 + subx_1106 + subx_1107 + subx_1108 + subx_1109 + subx_1111 + subx_1112 - subx_1113 - subx_1114 + subx_1115 - subx_1116 + subx_1117 - subx_1118 + subx_1120 - subx_116*subx_864 + subx_118*subx_864 - subx_119*subx_857 - subx_125*subx_874 - subx_128*subx_814 + subx_130*subx_814 - subx_131*subx_802 - subx_137*subx_877 - subx_139*subx_814 + subx_140*subx_814 - subx_141*subx_806 - subx_144*subx_840 - subx_145*subx_864 + subx_146*subx_864 - subx_147*subx_846 - subx_150*subx_834 - subx_163*subx_988 - subx_165*subx_994 - 0.02*subx_548*subx_550 - 0.0297833376235774*subx_696 + 0.0297833376235774*subx_705 - subx_790*(subx_115*subx_21 - subx_117*subx_21) - subx_795*(-subx_115*subx_35 + subx_117*subx_35) - subx_850*(subx_127*subx_39 - subx_129*subx_39) - subx_854*(-subx_127*subx_24 + subx_129*subx_24);
    ret(22,0) = -subx_1000*subx_253 - subx_1013*subx_240 - subx_1017*subx_243 - subx_1021*subx_246 - subx_1024*subx_249 - subx_1025*(subx_205*subx_27 + subx_209*subx_64) - subx_1026*(-subx_205*subx_46 + subx_209*subx_67) - subx_1027*subx_211 - subx_1027*subx_227 - subx_1029*(subx_209*subx_69 + subx_212*subx_49) - subx_1030*(subx_209*subx_72 - subx_212*subx_30) - subx_1033*subx_215 - subx_1033*subx_230 - subx_1073*subx_251 - subx_1122*subx_204 - subx_1123*subx_204 - subx_1124*subx_197 - subx_1126*subx_197 - subx_1128*subx_204 - subx_1129*subx_204 - subx_1130*subx_197 - subx_1131*subx_197 - subx_1134*subx_209 - subx_1136*subx_209 - subx_1138*subx_209 - subx_1139*subx_209 - subx_1141*subx_204 - subx_1142*subx_204 - subx_1144*subx_679 - subx_1144*subx_688 - subx_1144*subx_697 - subx_1144*subx_706 - subx_1146*subx_204 - subx_1147*subx_204 - subx_1148*subx_959 - subx_1148*subx_962 - subx_1148*subx_965 - subx_1148*subx_983 - subx_211*subx_874 - subx_215*subx_877 - subx_219*subx_857 - subx_219*subx_864 - subx_224*subx_802 - subx_224*subx_814 - subx_227*subx_834 - subx_230*subx_840 - subx_233*subx_846 - subx_233*subx_864 - subx_237*subx_806 - subx_237*subx_814 - subx_250*subx_988 - subx_252*subx_994 - subx_790*(subx_167*subx_204 + subx_197*subx_22 - subx_209*subx_53) - subx_795*(-subx_197*subx_75 - subx_204*subx_378 - subx_209*subx_56) - subx_850*(subx_170*subx_204 + subx_197*subx_76 - subx_209*subx_59) - subx_854*(-subx_181*subx_204 - subx_197*subx_25 - subx_209*subx_62);
    ret(23,0) = -subx_1000*subx_299 - subx_1013*subx_292 - subx_1017*subx_295 - subx_1021*subx_286 - subx_1024*subx_289 - subx_1025*(subx_258*subx_27 + subx_262*subx_64) - subx_1026*(-subx_258*subx_46 + subx_262*subx_67) - subx_1027*subx_264 - subx_1027*subx_276 - subx_1029*(subx_262*subx_69 + subx_265*subx_49) - subx_1030*(subx_262*subx_72 - subx_265*subx_30) - subx_1033*subx_268 - subx_1033*subx_279 - subx_1036*subx_1149 - subx_1038*subx_1149 - subx_1040*subx_1149 - subx_1041*subx_1149 - subx_1073*subx_297 - subx_1122*subx_257 - subx_1123*subx_257 - subx_1124*subx_256 - subx_1126*subx_256 - subx_1128*subx_257 - subx_1129*subx_257 - subx_1130*subx_256 - subx_1131*subx_256 - subx_1134*subx_262 - subx_1136*subx_262 - subx_1138*subx_262 - subx_1139*subx_262 - subx_1152*subx_679 - subx_1152*subx_688 - subx_1152*subx_697 - subx_1152*subx_706 - subx_1154*subx_959 - subx_1154*subx_962 - subx_1154*subx_965 - subx_1154*subx_983 - subx_264*subx_874 - subx_268*subx_877 - subx_270*subx_857 - subx_270*subx_864 - subx_273*subx_802 - subx_273*subx_814 - subx_276*subx_834 - subx_279*subx_840 - subx_281*subx_846 - subx_281*subx_864 - subx_283*subx_806 - subx_283*subx_814 - subx_296*subx_988 - subx_298*subx_994 - subx_790*(subx_167*subx_257 + subx_22*subx_256 - subx_262*subx_53) - subx_795*(-subx_256*subx_75 - subx_257*subx_378 - subx_262*subx_56) - subx_850*(subx_170*subx_257 + subx_256*subx_76 - subx_262*subx_59) - subx_854*(-subx_181*subx_257 - subx_25*subx_256 - subx_262*subx_62);
    ret(24,0) = -subx_1000*subx_351 - subx_1013*subx_343 - subx_1017*subx_346 - subx_1021*subx_337 - subx_1024*subx_340 - subx_1025*(subx_27*subx_303 + subx_305*subx_64) - subx_1026*(-subx_303*subx_46 + subx_305*subx_67) - subx_1027*subx_307 - subx_1027*subx_323 - subx_1029*(subx_305*subx_69 + subx_308*subx_49) - subx_1030*(-subx_30*subx_308 + subx_305*subx_72) - subx_1033*subx_311 - subx_1033*subx_326 - subx_1073*subx_348 - subx_1122*subx_302 - subx_1123*subx_302 - subx_1124*subx_301 - subx_1126*subx_301 - subx_1128*subx_302 - subx_1129*subx_302 - subx_1130*subx_301 - subx_1131*subx_301 - subx_1134*subx_305 - subx_1136*subx_305 - subx_1138*subx_305 - subx_1139*subx_305 - subx_1141*subx_302 - subx_1142*subx_302 - subx_1146*subx_302 - subx_1147*subx_302 - subx_1155*subx_679 - subx_1155*subx_688 - subx_1155*subx_697 - subx_1155*subx_706 - subx_1156*subx_959 - subx_1156*subx_962 - subx_1156*subx_965 - subx_1156*subx_983 - subx_307*subx_874 - subx_311*subx_877 - subx_316*subx_857 - subx_316*subx_864 - subx_320*subx_802 - subx_320*subx_814 - subx_323*subx_834 - subx_326*subx_840 - subx_330*subx_846 - subx_330*subx_864 - subx_334*subx_806 - subx_334*subx_814 - subx_347*subx_988 - subx_349*subx_994 - subx_790*(subx_21*subx_313 + subx_22*subx_301 - subx_305*subx_53) - subx_795*(-subx_301*subx_75 - subx_305*subx_56 - subx_313*subx_35) - subx_850*(subx_170*subx_302 + subx_301*subx_76 - subx_305*subx_59) - subx_854*(-subx_181*subx_302 - subx_25*subx_301 - subx_305*subx_62) + 30.0864954;
    ret(25,0) = inputs(0,0)*subx_1157 - subx_1063 - subx_1066 - subx_1067 + subx_1074 + subx_1077 + subx_1078 + subx_1085 + subx_1086 - subx_1092 - subx_1094 + subx_1099 + subx_1101 - subx_1109 - subx_1112 + subx_1116 + subx_1118 - 0.00799848*subx_557;
    ret(26,0) = inputs(1,0)*subx_1157 - subx_1064 - subx_1068 - subx_1069 + subx_1075 + subx_1079 + subx_1080 + subx_1087 + subx_1088 - subx_1096 - subx_1097 + subx_1100 + subx_1102 - subx_1106 - subx_1107 + subx_1113 + subx_1114 - 0.00799848*subx_558;
    ret(27,0) = inputs(2,0)*subx_1157 + subx_1065 + subx_1070 + subx_1071 + subx_1076 + subx_1081 + subx_1082 + subx_1083 + subx_1084 + subx_1090 + subx_1091 + subx_1103 + subx_1104 + subx_1108 + subx_1111 + subx_1115 + subx_1117 - 0.00799848*subx_559;
    ret(28,0) = inputs(3,0)*subx_1157 + subx_1120 - 0.00799848*subx_560;
    ret(29,0) = subx_1003 + subx_1040*subx_989 + subx_1055*subx_706 + subx_1158 - subx_1159 - subx_1160 - 51.8*subx_20 - 0.02368281825*subx_312 - 0.02368281825*subx_314 - 0.02368281825*subx_315 - 0.002415*subx_768*subx_787 + subx_775;
    ret(30,0) = -subx_1040*subx_978 - subx_1050*subx_706 + subx_1093*subx_959 + subx_1158 + subx_1159 + subx_1160 - 0.02368281825*subx_327 + 0.02368281825*subx_328 + 0.02368281825*subx_329 - 51.8*subx_34 + subx_651 - 0.002415*subx_841;
    ret(31,0) = subx_1007*subx_1038 + subx_1061*subx_679 + subx_1095*subx_983 + subx_1161 - subx_1163 - subx_1164 - 51.8*subx_38 + subx_786 - 0.002415*subx_798 - subx_824 - subx_825 - subx_826;
    ret(32,0) = -subx_1038*subx_982 - subx_1051*subx_679 + subx_1161 + subx_1163 + subx_1164 - 51.8*subx_23 + 0.02368281825*subx_332 + 0.02368281825*subx_333 + subx_671 - 0.002415*subx_805 - subx_870 + subx_985;
    ret(33,0) = subx_1041*subx_970 - subx_1056*subx_688 + subx_1089*subx_962 + subx_1165 + subx_1166 - subx_1167 - 51.8*subx_26 - 0.02368281825*subx_321 + 0.02368281825*subx_322 + subx_610 - subx_745 + subx_748 - 0.002415*subx_829;
    ret(34,0) = -subx_1041*subx_995 + subx_1053*subx_688 + subx_1060 + subx_1165 - subx_1166 + subx_1167 - 0.02368281825*subx_304 - 0.02368281825*subx_306 - 51.8*subx_45 - 0.002415*subx_597*subx_872 - subx_602 + subx_605 + subx_749;
    ret(35,0) = subx_1036*subx_974 + subx_1049 - subx_1057*subx_697 + subx_1168 + subx_1170 - subx_1171 - 0.02368281825*subx_324 + 0.02368281825*subx_325 - 51.8*subx_48 + subx_631 - subx_759 + subx_762 - 0.002415*subx_836;
    ret(36,0) = -subx_1001*subx_1036 + subx_1054*subx_697 + subx_1119*subx_965 + subx_1168 - subx_1170 + subx_1171 - 51.8*subx_29 - 0.02368281825*subx_309 - 0.02368281825*subx_310 - subx_622 + subx_625 + subx_763 - 0.002415*subx_876;
    return ret;
}

Eigen::Matrix<double,8,1> get_blade_v_z(Eigen::Matrix<double,37,1> states, Eigen::Matrix<double,4,1> inputs) {

    Eigen::Matrix<double,8,1> ret;
    ret(0,0) = 0.1725*states(19,0)*cos(states(7,0)) - 0.1725*states(20,0)*sin(states(7,0)) - 0.254558441227157*states(21,0)*sin(states(11,0))*sin(states(7,0)) + 0.254558441227157*states(21,0)*sin(states(11,0))*cos(states(7,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(11,0)) + (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(11,0))*cos(states(7,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(11,0))*sin(states(7,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(11,0)) + (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(11,0))*sin(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(11,0))*cos(states(7,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(11,0))*cos(states(7,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(11,0))*sin(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(11,0))) - 0.1725*states(29,0) + (0.254558441227157*states(19,0) - 0.254558441227157*states(20,0))*cos(states(11,0));
    ret(1,0) = 0.1725*states(19,0)*cos(states(7,0)) - 0.1725*states(20,0)*sin(states(7,0)) - 0.254558441227157*states(21,0)*sin(states(11,0))*sin(states(7,0)) + 0.254558441227157*states(21,0)*sin(states(11,0))*cos(states(7,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(11,0)) + (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(11,0))*cos(states(7,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(11,0))*sin(states(7,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(11,0)) + (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(11,0))*sin(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(11,0))*cos(states(7,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(11,0))*cos(states(7,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(11,0))*sin(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(11,0))) - 0.1725*states(29,0) + (0.254558441227157*states(19,0) - 0.254558441227157*states(20,0))*cos(states(11,0));
    ret(2,0) = -0.1725*states(19,0)*cos(states(7,0)) + 0.1725*states(20,0)*sin(states(7,0)) + 0.254558441227157*states(21,0)*sin(states(12,0))*sin(states(7,0)) - 0.254558441227157*states(21,0)*sin(states(12,0))*cos(states(7,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(12,0)) - (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(12,0))*cos(states(7,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(12,0))*sin(states(7,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(12,0)) - (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(12,0))*sin(states(7,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(12,0))*cos(states(7,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(12,0))*cos(states(7,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(12,0))*sin(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(12,0))) - 0.1725*states(30,0) + (0.254558441227157*states(19,0) - 0.254558441227157*states(20,0))*cos(states(12,0));
    ret(3,0) = -0.1725*states(19,0)*cos(states(7,0)) + 0.1725*states(20,0)*sin(states(7,0)) + 0.254558441227157*states(21,0)*sin(states(12,0))*sin(states(7,0)) - 0.254558441227157*states(21,0)*sin(states(12,0))*cos(states(7,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(12,0)) - (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(12,0))*cos(states(7,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(12,0))*sin(states(7,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(12,0)) - (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(12,0))*sin(states(7,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(12,0))*cos(states(7,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(12,0))*cos(states(7,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(12,0))*sin(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(12,0))) - 0.1725*states(30,0) + (0.254558441227157*states(19,0) - 0.254558441227157*states(20,0))*cos(states(12,0));
    ret(4,0) = 0.1725*states(19,0)*cos(states(8,0)) - 0.1725*states(20,0)*sin(states(8,0)) + 0.254558441227157*states(21,0)*sin(states(13,0))*sin(states(8,0)) - 0.254558441227157*states(21,0)*sin(states(13,0))*cos(states(8,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(13,0)) + (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(13,0))*cos(states(8,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(13,0))*sin(states(8,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(13,0)) + (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(13,0))*sin(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(13,0))*cos(states(8,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(13,0))*cos(states(8,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(13,0))*sin(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(13,0))) - 0.1725*states(31,0) + (-0.254558441227157*states(19,0) + 0.254558441227157*states(20,0))*cos(states(13,0));
    ret(5,0) = 0.1725*states(19,0)*cos(states(8,0)) - 0.1725*states(20,0)*sin(states(8,0)) + 0.254558441227157*states(21,0)*sin(states(13,0))*sin(states(8,0)) - 0.254558441227157*states(21,0)*sin(states(13,0))*cos(states(8,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(13,0)) + (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(13,0))*cos(states(8,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(13,0))*sin(states(8,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(13,0)) + (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(13,0))*sin(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(13,0))*cos(states(8,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(13,0))*cos(states(8,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(13,0))*sin(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(13,0))) - 0.1725*states(31,0) + (-0.254558441227157*states(19,0) + 0.254558441227157*states(20,0))*cos(states(13,0));
    ret(6,0) = -0.1725*states(19,0)*cos(states(8,0)) + 0.1725*states(20,0)*sin(states(8,0)) - 0.254558441227157*states(21,0)*sin(states(14,0))*sin(states(8,0)) + 0.254558441227157*states(21,0)*sin(states(14,0))*cos(states(8,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(14,0)) - (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(14,0))*cos(states(8,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(14,0))*sin(states(8,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(14,0)) - (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(14,0))*sin(states(8,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(14,0))*cos(states(8,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(14,0))*cos(states(8,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(14,0))*sin(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(14,0))) - 0.1725*states(32,0) + (-0.254558441227157*states(19,0) + 0.254558441227157*states(20,0))*cos(states(14,0));
    ret(7,0) = -0.1725*states(19,0)*cos(states(8,0)) + 0.1725*states(20,0)*sin(states(8,0)) - 0.254558441227157*states(21,0)*sin(states(14,0))*sin(states(8,0)) + 0.254558441227157*states(21,0)*sin(states(14,0))*cos(states(8,0)) + states(22,0)*((2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(14,0)) - (-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(14,0))*cos(states(8,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(14,0))*sin(states(8,0))) + states(23,0)*((-2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*cos(states(14,0)) - (2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(14,0))*sin(states(8,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(14,0))*cos(states(8,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(14,0))*cos(states(8,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*sin(states(14,0))*sin(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) - pow(states(2,0), 2) + pow(states(3,0), 2))*cos(states(14,0))) - 0.1725*states(32,0) + (-0.254558441227157*states(19,0) + 0.254558441227157*states(20,0))*cos(states(14,0));
    return ret;
}Eigen::Matrix<double,8,1> get_blade_v_2(Eigen::Matrix<double,37,1> states, Eigen::Matrix<double,4,1> inputs) {

    Eigen::Matrix<double,8,1> ret;
    ret(0,0) = -0.1725*states(19,0)*sin(states(11,0))*sin(states(7,0)) - 0.1725*states(20,0)*sin(states(11,0))*cos(states(7,0)) - 0.254558441227157*states(21,0)*sin(states(7,0)) - 0.254558441227157*states(21,0)*cos(states(7,0)) + states(22,0)*((2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*sin(states(7,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(7,0))) + states(23,0)*((2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*cos(states(7,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(7,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(7,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(7,0))) - (0.1725*states(21,0) - 0.1725*states(25,0))*cos(states(11,0));
    ret(1,0) = -0.1725*states(19,0)*sin(states(11,0))*sin(states(7,0)) - 0.1725*states(20,0)*sin(states(11,0))*cos(states(7,0)) - 0.254558441227157*states(21,0)*sin(states(7,0)) - 0.254558441227157*states(21,0)*cos(states(7,0)) + states(22,0)*((2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*sin(states(7,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(7,0))) + states(23,0)*((2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*cos(states(7,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(7,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(7,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(7,0))) - (0.1725*states(21,0) - 0.1725*states(25,0))*cos(states(11,0));
    ret(2,0) = 0.1725*states(19,0)*sin(states(12,0))*sin(states(7,0)) + 0.1725*states(20,0)*sin(states(12,0))*cos(states(7,0)) + 0.254558441227157*states(21,0)*sin(states(7,0)) + 0.254558441227157*states(21,0)*cos(states(7,0)) + states(22,0)*((-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(7,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(7,0))) + states(23,0)*((-2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*cos(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(7,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(7,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(7,0))) - (0.1725*states(21,0) - 0.1725*states(25,0))*cos(states(12,0));
    ret(3,0) = 0.1725*states(19,0)*sin(states(12,0))*sin(states(7,0)) + 0.1725*states(20,0)*sin(states(12,0))*cos(states(7,0)) + 0.254558441227157*states(21,0)*sin(states(7,0)) + 0.254558441227157*states(21,0)*cos(states(7,0)) + states(22,0)*((-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(7,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(7,0))) + states(23,0)*((-2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*cos(states(7,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(7,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(7,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(7,0))) - (0.1725*states(21,0) - 0.1725*states(25,0))*cos(states(12,0));
    ret(4,0) = -0.1725*states(19,0)*sin(states(13,0))*sin(states(8,0)) - 0.1725*states(20,0)*sin(states(13,0))*cos(states(8,0)) + 0.254558441227157*states(21,0)*sin(states(8,0)) + 0.254558441227157*states(21,0)*cos(states(8,0)) + states(22,0)*((2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*sin(states(8,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(8,0))) + states(23,0)*((2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*cos(states(8,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(8,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(8,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(8,0))) - (0.1725*states(21,0) - 0.1725*states(26,0))*cos(states(13,0));
    ret(5,0) = -0.1725*states(19,0)*sin(states(13,0))*sin(states(8,0)) - 0.1725*states(20,0)*sin(states(13,0))*cos(states(8,0)) + 0.254558441227157*states(21,0)*sin(states(8,0)) + 0.254558441227157*states(21,0)*cos(states(8,0)) + states(22,0)*((2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*sin(states(8,0)) + (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(8,0))) + states(23,0)*((2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*cos(states(8,0)) - (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(8,0))) + states(24,0)*((-2*states(0,0)*states(1,0) - 2*states(2,0)*states(3,0))*sin(states(8,0)) + (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(8,0))) - (0.1725*states(21,0) - 0.1725*states(26,0))*cos(states(13,0));
    ret(6,0) = 0.1725*states(19,0)*sin(states(14,0))*sin(states(8,0)) + 0.1725*states(20,0)*sin(states(14,0))*cos(states(8,0)) - 0.254558441227157*states(21,0)*sin(states(8,0)) - 0.254558441227157*states(21,0)*cos(states(8,0)) + states(22,0)*((-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(8,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(8,0))) + states(23,0)*((-2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*cos(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(8,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(8,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(8,0))) - (0.1725*states(21,0) - 0.1725*states(26,0))*cos(states(14,0));
    ret(7,0) = 0.1725*states(19,0)*sin(states(14,0))*sin(states(8,0)) + 0.1725*states(20,0)*sin(states(14,0))*cos(states(8,0)) - 0.254558441227157*states(21,0)*sin(states(8,0)) - 0.254558441227157*states(21,0)*cos(states(8,0)) + states(22,0)*((-2*states(0,0)*states(3,0) + 2*states(1,0)*states(2,0))*sin(states(8,0)) - (pow(states(0,0), 2) + pow(states(1,0), 2) - pow(states(2,0), 2) - pow(states(3,0), 2))*cos(states(8,0))) + states(23,0)*((-2*states(0,0)*states(3,0) - 2*states(1,0)*states(2,0))*cos(states(8,0)) + (pow(states(0,0), 2) - pow(states(1,0), 2) + pow(states(2,0), 2) - pow(states(3,0), 2))*sin(states(8,0))) + states(24,0)*((2*states(0,0)*states(1,0) + 2*states(2,0)*states(3,0))*sin(states(8,0)) - (-2*states(0,0)*states(2,0) + 2*states(1,0)*states(3,0))*cos(states(8,0))) - (0.1725*states(21,0) - 0.1725*states(26,0))*cos(states(14,0));
    return ret;
}
